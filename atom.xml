<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我一路向北</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-01T02:25:10.322Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>我一路向北</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack配置react开发环境</title>
    <link href="http://yoursite.com/2017/07/25/webpack%E9%85%8D%E7%BD%AEreact%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2017/07/25/webpack配置react开发环境/</id>
    <published>2017-07-25T11:32:15.000Z</published>
    <updated>2017-09-01T02:25:10.322Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 性能调优</title>
    <link href="http://yoursite.com/2017/07/19/JavaScript%20%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <id>http://yoursite.com/2017/07/19/JavaScript 性能调优/</id>
    <published>2017-07-19T14:22:55.000Z</published>
    <updated>2017-09-01T02:18:49.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Web 开发中经常会遇到性能的问题，尤其是针对当今的 Web2.0 应用。JavaScript 是当今使用最为广泛的 Web 开发语言，Web 应用的性能问题很大一部分都是由程序员写的 JavaScript 脚本性能不佳所造成的，里面包括了 JavaScript 语言本身的性能问题，以及其与 DOM 交互时的性能问题。本文主要来探讨一下如何尽可能多的避免这类问题，从而最大限度的提高 Web 应用的性能。</p>
</blockquote>
<h1 id="JavaScript-性能调优"><a href="#JavaScript-性能调优" class="headerlink" title="JavaScript 性能调优"></a>JavaScript 性能调优</h1><p>JavaScript 语言由于它的单线程和解释执行的两个特点，决定了它本身有很多地方有性能问题，所以可改进的地方有不少。<br>eval 的问题：<br>比较下述代码：</p>
<h2 id="1-eval-的问题"><a href="#1-eval-的问题" class="headerlink" title="1. eval 的问题"></a>1. eval 的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var reference = &#123;&#125;, props = “p1”; </div><div class="line">eval(“reference.” + props + “=5”) </div><div class="line"> </div><div class="line">var reference = &#123;&#125;, props = “p1”; </div><div class="line">reference[props] = 5</div></pre></td></tr></table></figure>
<p>有<code>eval</code>的代码比没有<code>eval</code>的代码要慢上 100 倍以上。</p>
<blockquote>
<p>主要原因是：JavaScript 代码在执行前会进行类似<code>预编译</code>的操作：首先会创建一个当前执行环境下的活动对象，并将那些用 var 申明的变量设置为活动对象的属性，但是此时这些变量的赋值都是 undefined，并将那些以 function 定义的函数也添加为活动对象的属性，而且它们的值正是函数的定义。但是，如果你使用了<code>eval</code>，则<code>eval</code>中的代码（实际上为字符串）无法预先识别其上下文，无法被提前解析和优化，即无法进行预编译的操作。所以，其性能也会大幅度降低。</p>
</blockquote>
<h2 id="2-function-的用法"><a href="#2-function-的用法" class="headerlink" title="2. function 的用法"></a>2. function 的用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var func1 = new Function(“return arguments[0] + arguments[1]”);</div><div class="line">func1(10, 20); </div><div class="line"> </div><div class="line">var func2 = function()&#123; return arguments[0] + arguments[1] &#125;;</div><div class="line">func2(10, 20);</div></pre></td></tr></table></figure>
<p>这里类似之前提到的<code>eval</code>方法，这里<code>func1</code>的效率会比<code>func2</code>的效率差很多，所以推荐使用第二种方式。</p>
<h2 id="3-函数的作用域链（scope-chain）："><a href="#3-函数的作用域链（scope-chain）：" class="headerlink" title="3.函数的作用域链（scope chain）："></a>3.函数的作用域链（scope chain）：</h2><blockquote>
<p>JavaScript 代码解释执行，在进入函数内部时，它会预先分析当前的变量，并将这些变量归入不同的层级（level），一般情况下：<br>局部变量放入层级 1（浅），全局变量放入层级 2（深）。如果进入<code>with</code>或<code>try – catch</code>代码块，则会增加新的层级，即将<code>with</code>或<code>catch</code>里的变量放入最浅层（层 1），并将之前的层级依次加深。</p>
</blockquote>
<p>参考如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var myObj = … .. </div><div class="line">… .. </div><div class="line"> function process()&#123; </div><div class="line"> var images = document.getElementsByTagName(&quot;img&quot;), </div><div class="line"> widget = document.getElementsByTagName(&quot;input&quot;), </div><div class="line"> combination = []; </div><div class="line"> for(var i = 0; i &lt; images.length; i++)&#123; </div><div class="line"> combination.push(combine(images[i], widget[2*i])); </div><div class="line"> &#125; </div><div class="line"> myObj.container.property1 = combination[0]; </div><div class="line"> myObj.container.property2 = combination[combination.length-1]; </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们可以看到，<code>images</code>，<code>widget</code>，<code>combination</code>属于局部变量,在层 1。<code>documen</code>，<code>myObj</code>属于全局变量，<br>在层 2。变量所在的层越浅，访问（读取或修改）速度越快，层越深，访问速度越慢。所以这里对<code>images</code>，<code>widget</code>，<code>combination</code>的访问速度比<code>document</code>，<code>myObj</code>要快一些。所以推荐尽量使用局部变量。</p>
</blockquote>
<h2 id="4-使用局部变量"><a href="#4-使用局部变量" class="headerlink" title="4. 使用局部变量"></a>4. 使用局部变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var myObj; </div><div class="line"> function process()&#123; </div><div class="line"> var doc = document;</div><div class="line"> var images = doc.getElementsByTagName(&quot;img&quot;), </div><div class="line"> widget = doc.getElementsByTagName(&quot;input&quot;), </div><div class="line"> combination = []; </div><div class="line"> for(var i = 0; i &lt; images.length; i++)&#123; </div><div class="line"> combination.push(combine(images[i], widget[2*i])); </div><div class="line"> &#125; </div><div class="line"> myObj.container.property1 = combination[0]; </div><div class="line"> myObj.container.property2 = combination[combination.length-1]; </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>我们用局部变量<code>doc</code>取代全局变量<code>document</code>，这样可以改进性能，尤其是对于大量使用全局变量的函数里面。</p>
<h2 id="5-慎用-with"><a href="#5-慎用-with" class="headerlink" title="5. 慎用 with"></a>5. 慎用 with</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var myObj;</div><div class="line">function process()&#123; </div><div class="line">    var doc = document; </div><div class="line">    var images = doc.getElementsByTagName(&quot;img&quot;), </div><div class="line">    widget = doc.getElementsByTagName(&quot;input&quot;), </div><div class="line">    combination = []; </div><div class="line">    for(var i = 0; i &lt; images.length; i++)&#123; </div><div class="line">        combination.push(combine(images[i], widget[2*i])); </div><div class="line">    &#125; </div><div class="line">    with (myObj.container) &#123;</div><div class="line">        property1 = combination[0];</div><div class="line">        property2 = combination[combination.length-1];</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>加上<code>with</code>关键字，我们让代码更加简洁清晰了，但是这样做性能会受影响。正如之前说的，当我们进入<code>with</code>代码块时，<code>combination</code>便从原来的层 1 变到了层 2，这样，效率会大打折扣。所以比较一下，还是使用原来的代码。</p>
</blockquote>
<h2 id="6-改进-with"><a href="#6-改进-with" class="headerlink" title="6. 改进 with"></a>6. 改进 with</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var myObj;</div><div class="line"> function process()&#123; </div><div class="line"> var doc = document; </div><div class="line"> var images = doc.getElementsByTagName(&quot;img&quot;), </div><div class="line"> widget = doc.getElementsByTagName(&quot;input&quot;), </div><div class="line"> combination = []; </div><div class="line"> for(var i = 0; i &lt; images.length; i++)&#123; </div><div class="line"> combination.push(combine(images[i], widget[2*i])); </div><div class="line"> &#125; </div><div class="line"> myObj.container.property1 = combination[0];</div><div class="line"> myObj.container.property2 = combination[combination.length-1];</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>但是这样并不是最好的方式，JavaScript 有个特点，对于 object 对象来说，其属性访问层级越深，效率越低，比如这里的<code>myObj</code>已经访问到了第 3 层，我们可以这样改进一下：</p>
</blockquote>
<h2 id="7-缩小对象访问层级"><a href="#7-缩小对象访问层级" class="headerlink" title="7. 缩小对象访问层级"></a>7. 缩小对象访问层级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var myObj = … .. </div><div class="line">… .. </div><div class="line"> function process()&#123; </div><div class="line"> var doc = document; </div><div class="line">    var images = doc.getElementsByTagName(&quot;img&quot;), </div><div class="line"> widget = doc.getElementsByTagName(&quot;input&quot;), </div><div class="line"> combination = []; </div><div class="line"> for(var i = 0; i &lt; images.length; i++)&#123; </div><div class="line"> combination.push(combine(images[i], widget[2*i])); </div><div class="line"> &#125; </div><div class="line"> var ctn = myObj.container;</div><div class="line"> ctn.property1 = combination[0];</div><div class="line"> ctn.property2 = combination[combination.length-1];</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>我们用局部变量来代替“myObj”的第 2 层的“container”对象。如果有大量的这种对对象深层属性的访问，可以参照以上方式提高性能。<br>字符串（String）相关<br>字符串拼接<br>经常看到这样的代码：</p>
<h2 id="8-字符串简单拼接"><a href="#8-字符串简单拼接" class="headerlink" title="8. 字符串简单拼接"></a>8. 字符串简单拼接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str += “str1” + “str2”</div></pre></td></tr></table></figure>
<p>这是我们拼接字符串常用的方式，但是这种方式会有一些临时变量的创建和销毁，影响性能，所以推荐使用如下方式拼接</p>
<h2 id="9-字符串数组方式拼接"><a href="#9-字符串数组方式拼接" class="headerlink" title="9. 字符串数组方式拼接"></a>9. 字符串数组方式拼接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str_array = []; </div><div class="line">str_array.push(“str1”); </div><div class="line">str_array.push(“str2”); </div><div class="line">str = str_array.join(“”);</div></pre></td></tr></table></figure>
<p>这里我们利用数组（array）的“join”方法实现字符串的拼接，尤其是程序的老版本的 Internet Explore（IE6）上运行时，会有非常明显的性能上的改进。<br>当然，最新的浏览器（如火狐 Firefox3+，IE8+ 等等）对字符串的拼接做了优化，我们也可以这样写：</p>
<h2 id="10-字符串快速拼接"><a href="#10-字符串快速拼接" class="headerlink" title="10. 字符串快速拼接"></a>10. 字符串快速拼接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str +=“str1”</div><div class="line">str +=“str2”</div></pre></td></tr></table></figure>
<p>新的浏览器对“+=”做了优化，性能略快于数组的“join”方法。在不久的将来更新版本浏览器可能对“+”也会做优化，所以那时我们可以直接写：str += “str1” + “str2”。<br>隐式类型转换<br>参考如下代码：</p>
<h2 id="11-隐式类型转换"><a href="#11-隐式类型转换" class="headerlink" title="11. 隐式类型转换"></a>11. 隐式类型转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str = “12345678”, arr = []; </div><div class="line">for(var i = 0; i &lt;= s.length; i++)&#123; </div><div class="line">arr.push( str.charAt(i)); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们在每个循环时都会调用字符串的“charAt”方法，但是由于我们是将常量“12345678”赋值给“str”，所以“str”这里事实上并不是一个字符串对象，当它每次调用“charAt”函数时，都会临时构造值为“12345678”的字符串对象，然后调用“charAt”方法，最后再释放这个字符串临时对象。我们可以做一些改进：</p>
<h2 id="12-避免隐式类型转换"><a href="#12-避免隐式类型转换" class="headerlink" title="12. 避免隐式类型转换"></a>12. 避免隐式类型转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var str = new Stirng(“12345678”), arr = []; </div><div class="line">for(var i = 0; i &lt;= s.length; i++)&#123; </div><div class="line">arr.push( str.charAt(i)); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，变量“str”作为一个字符串对象，就不会有这种隐式类型转换的过程了，这样一来，效率会显著提高。</p>
<h2 id="13-字符串匹配"><a href="#13-字符串匹配" class="headerlink" title="13.字符串匹配"></a>13.字符串匹配</h2><p>JavaScript 有 RegExp 对象，支持对字符串的正则表达式匹配。是一个很好的工具，但是它的性能并不是非常理想。相反，字符串对象（String）本身的一些基本方法的效率是非常高的，比如“substring”，“indexOf”，“charAt”等等，在我们需要用正则表达式匹配字符串时，可以考虑一下：<br>是否能够通过字符串对象本身支持的基本方法解决问题。<br>是否可以通过“substring”来缩小需要用正则表达式的范围。<br>这些方式都能够有效的提高程序的效率。<br>关于正则表达式对象，还有一点需要注意，参考如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for(var i = 0; i &lt;= str_array.length; i++)&#123; </div><div class="line"> if(str_array[i].match(/^s*extra\s/))&#123; </div><div class="line"> &#125; </div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>这里，我们往“match”方法传入“/^s<em>extra\s/”是会影响效率的，它会构建临时值为“/^s</em>extra\s/”的正则表达式对象，执行“match”方法，然后销毁临时的正则表达式对象。我们可以这样做：</p>
<h2 id="14-利用变量"><a href="#14-利用变量" class="headerlink" title="14. 利用变量"></a>14. 利用变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var sExpr = /^s*extra\s/;</div><div class="line"> for(var i = 0; i &lt;= str_array.length; i++)&#123; </div><div class="line"> if(str_array[i].match(sExpr))&#123; </div><div class="line"> &#125; </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这样就不会有临时对象了。<br>setTimeout 和 setInterval<br>“setTimeout”和“setInterval”这两个函数可以接受字符串变量，但是会带来和之前谈到的“eval”类似的性能问题，所以建议还是直接传入函数对象本身。<br>利用提前退出<br>参考如下两段代码：</p>
<h2 id="15-利用提前退出"><a href="#15-利用提前退出" class="headerlink" title="15. 利用提前退出"></a>15. 利用提前退出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> // 代码 1</div><div class="line">var name = … .; </div><div class="line">var source = …… ; </div><div class="line">if(source.match(/ …… /))&#123; </div><div class="line"></div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">// 代码 2</div><div class="line">var name = … .; </div><div class="line">var source = …… ; </div><div class="line">if(name.indexOf( … ) &amp;&amp;source.match(/ …… /))&#123; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>代码 2 多了一个对“name.indexOf( … )”的判断，这使得程序每次走到这一段时会先执行“indexOf”的判断，再执行后面的“match”，在“indexOf”比“match”效率高很多的前提下，这样做会减少“match”的执行次数，从而一定程度的提高效率。<br>DOM 操作性能调优<br>JavaScript 的开发离不开 DOM 的操作，所以对 DOM 操作的性能调优在 Web 开发中也是非常重要的。<br>Repaint 和 Reflow<br>Repaint 也叫 Redraw，它指的是一种不会影响当前 DOM 的结构和布局的一种重绘动作。如下动作会产生 Repaint 动作：<br>不可见到可见（visibility 样式属性）<br>颜色或图片变化（background, border-color, color 样式属性）<br>不改变页面元素大小，形状和位置，但改变其外观的变化<br>Reflow 比起 Repaint 来讲就是一种更加显著的变化了。它主要发生在 DOM 树被操作的时候，任何改变 DOM 的结构和布局都会产生 Reflow。但一个元素的 Reflow 操作发生时，它的所有父元素和子元素都会放生 Reflow，最后 Reflow 必然会导致 Repaint 的产生。举例说明，如下动作会产生 Repaint 动作：<br>浏览器窗口的变化<br>DOM 节点的添加删除操作<br>一些改变页面元素大小，形状和位置的操作的触发<br>减少 Reflow<br>通过 Reflow 和 Repaint 的介绍可知，每次 Reflow 比其 Repaint 会带来更多的资源消耗，我们应该尽量减少 Reflow 的发生，或者将其转化为只会触发 Repaint 操作的代码。<br>参考如下代码：</p>
</blockquote>
<h2 id="16-reflow-介绍"><a href="#16-reflow-介绍" class="headerlink" title="16. reflow 介绍"></a>16. reflow 介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var pDiv = document.createElement(“div”); </div><div class="line">document.body.appendChild(pDiv);----- reflow</div><div class="line">var cDiv1 = document.createElement(“div”); </div><div class="line">var cDiv2 = document.createElement(“div”); </div><div class="line">pDiv.appendChild(cDiv1);----- reflow</div><div class="line">pDiv.appendChild(cDiv2);----- reflow</div></pre></td></tr></table></figure>
<p>这是我们经常接触的代码了，但是这段代码会产生 3 次 reflow。再看如下代码：</p>
<h2 id="17-减少-reflow"><a href="#17-减少-reflow" class="headerlink" title="17. 减少 reflow"></a>17. 减少 reflow</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var pDiv = document.createElement(“div”); </div><div class="line">var cDiv1 = document.createElement(“div”); </div><div class="line">var cDiv2 = document.createElement(“div”); </div><div class="line">pDiv.appendChild(cDiv1); </div><div class="line">pDiv.appendChild(cDiv2); </div><div class="line">document.body.appendChild(pDiv);----- reflow</div></pre></td></tr></table></figure>
<p>这里便只有一次 reflow，所以我们推荐这种 DOM 节点操作的方式。<br>关于上述较少 Reflow 操作的解决方案，还有一种可以参考的模式：</p>
<h2 id="18-利用-display-减少-reflow"><a href="#18-利用-display-减少-reflow" class="headerlink" title="18. 利用 display 减少 reflow"></a>18. 利用 display 减少 reflow</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pDiv = <span class="built_in">document</span>.getElementById(“parent”); </div><div class="line">pDiv.style.display = “none”----- reflow</div><div class="line"> </div><div class="line">pDiv.appendChild(cDiv1); </div><div class="line">pDiv.appendChild(cDiv2); </div><div class="line">pDiv.appendChild(cDiv3); </div><div class="line">pDiv.appendChild(cDiv4); </div><div class="line">pDiv.appendChild(cDiv5); </div><div class="line">pDiv.style.width = “<span class="number">100</span>px”; </div><div class="line">pDiv.style.height = “<span class="number">100</span>px”; </div><div class="line"> </div><div class="line">pDiv.style.display = “block”----- reflow</div></pre></td></tr></table></figure>
<p>先隐藏 pDiv，再显示，这样，隐藏和显示之间的操作便不会产生任何的 Reflow，提高了效率。<br>特殊测量属性和方法<br>DOM 元素里面有一些特殊的测量属性的访问和方法的调用，也会触发 Reflow，比较典型的就是“offsetWidth”属性和“getComputedStyle”方法。<br>图 1. 特殊测量属性和方法<br>图 1. 特殊测量属性和方法<br>这些测量属性和方法大致有这些：<br>offsetLeft<br>offsetTop<br>offsetHeight<br>offsetWidth<br>scrollTop/Left/Width/Height<br>clientTop/Left/Width/Height<br>getComputedStyle()<br>currentStyle(in IE))<br>这些属性和方法的访问和调用，都会触发 Reflow 的产生，我们应该尽量减少对这些属性和方法的访问和调用，参考如下代码：</p>
<h2 id="19-特殊测量属性"><a href="#19-特殊测量属性" class="headerlink" title="19. 特殊测量属性"></a>19. 特殊测量属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var pe = document.getElementById(“pos_element”); </div><div class="line"> var result = document.getElementById(“result_element”); </div><div class="line"> var pOffsetWidth = pe.offsetWidth;</div><div class="line"> result.children[0].style.width  = pOffsetWidth; </div><div class="line"> result.children[1].style.width  = pOffsetWidth; </div><div class="line"> result.children[2].style.width  = pOffsetWidth; </div><div class="line">…………其他修改…………</div></pre></td></tr></table></figure>
<p>这里我们可以用临时变量将“offsetWidth”的值缓存起来，这样就不用每次访问“offsetWidth”属性。这种方式在循环里面非常适用，可以极大地提高性能。<br>样式相关<br>我们肯定经常见到如下的代码：</p>
<h2 id="20-样式相关"><a href="#20-样式相关" class="headerlink" title="20. 样式相关"></a>20. 样式相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var sElement = document.getElementById(“pos_element”); </div><div class="line">sElement.style.border = ‘ 1px solid red ’</div><div class="line">sElement.style.backgroundColor = ‘ silver ’</div><div class="line">sElement.style.padding = ‘ 2px 3px ’</div><div class="line">sElement.style.marginLeft = ‘ 5px ’</div></pre></td></tr></table></figure>
<p>但是可以看到，这里的每一个样式的改变，都会产生 Reflow。需要减少这种情况的发生，我们可以这样做：<br>解决方案 1：</p>
<h3 id="className-解决方案"><a href="#className-解决方案" class="headerlink" title="className 解决方案"></a>className 解决方案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.class1 &#123; </div><div class="line">border: ‘ <span class="number">1</span>px solid red ’</div><div class="line">background-color: ‘ silver ’</div><div class="line">padding: ‘ <span class="number">2</span>px <span class="number">3</span>px ’</div><div class="line">margin-left: ‘ <span class="number">5</span>px ’</div><div class="line">&#125; </div><div class="line"><span class="built_in">document</span>.getElementById(“pos_element”).className = ‘class1’ ;</div></pre></td></tr></table></figure>
<p>用 class 替代 style，可以将原有的所有 Reflow 或 Repaint 的次数都缩减到一个。<br>解决方案 2：</p>
<h3 id="cssText-解决方案"><a href="#cssText-解决方案" class="headerlink" title="cssText 解决方案"></a>cssText 解决方案</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sElement = <span class="built_in">document</span>.getElementById(“pos_element”); </div><div class="line"><span class="keyword">var</span> newStyle = ‘ border: <span class="number">1</span>px solid red; ’ + ‘ background-color: silver; ’ + </div><div class="line">                                ‘ padding: <span class="number">2</span>px <span class="number">3</span>px; ’ + “margin-left: <span class="number">5</span>px;”</div><div class="line">sElement.style.cssText += newStyle;</div></pre></td></tr></table></figure>
<p>一次性设置所有样式，也是减少 Reflow 提高性能的方法。</p>
<h2 id="21-动态创建-script-标签"><a href="#21-动态创建-script-标签" class="headerlink" title="21.动态创建 script 标签"></a>21.动态创建 script 标签</h2><p>加载并执行一段 JavaScript 脚本是需要一定时间的，在我们的程序中，有时候有些 JavaScript 脚本被加载后基本没有被使用过 （比如：脚本里的函数从来没有被调用等等）。加载这些脚本只会占用 CPU 时间和增加内存消耗，降低 Web 应用的性能。所以推荐动态的加载 JavaScript 脚本文件，尤其是那些内容较多，消耗资源较大的脚本文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if(needXHR)&#123; </div><div class="line">document.write(“&lt;script type= ’ test\/JavaScript ’ src= &apos;dojo_xhr.js&apos; &gt;”); </div><div class="line">&#125; </div><div class="line">if(dojo.isIE)&#123; </div><div class="line">document.write(“&lt;script type= ’ test\/JavaScript ’ src= &apos;vml.js&apos; &gt;”); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><pre><code>最后，总结下常见的dom操作的优化方法（节选自高性能JavaScript）

 1  最小化dom访问次数，尽可能在js端执行；
 2  如果需要多次访问某个dom节点，请使用局部变量存储对它的引用；
 3  小心处理html集合，因为它实时连系着底层的文档，把集合的长度缓存到一个变量中，并在迭代中使用它，如果需要经常操作集合，建议把它拷贝到一个数组中；
 4  如果可能的话，使用速度更快的API，比如querySelectorAll和firstElementChild；
 5  要留意重绘和重排；批量修改样式时，“离线”操作dom树；使用缓存，并减少访问布局的次数；
 6  动画中使用绝对定位，使用拖放代理
 7  使用事件委托来减少事件处理器的数量

 总结下js中对数据访问的优化（节选自高性能JavaScript）

 1  函数中读写局部变量总是最快的，而全局变量的读取则是最慢的；
 2  尽可能地少用with 语句，因为它会增加with 语句以外的数据的访问代价；
 3  闭包尽管强大，但不可滥用，否则会影响到执行速度以及内存；
 4  嵌套的对象成员会明显影响性能，尽量少用；
 5  避免多次访问对象成员或函数中的全局变量，尽量将它们赋值给局部变量以缓存。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Web 开发中经常会遇到性能的问题，尤其是针对当今的 Web2.0 应用。JavaScript 是当今使用最为广泛的 Web 开发语言，Web 应用的性能问题很大一部分都是由程序员写的 JavaScript 脚本性能不佳所造成的，里面包括了 Jav
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React 全家桶实现后台管理界面</title>
    <link href="http://yoursite.com/2017/06/29/react%20%E5%85%A8%E5%AE%B6%E6%A1%B6%E5%AE%9E%E7%8E%B0%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2/"/>
    <id>http://yoursite.com/2017/06/29/react 全家桶实现后台管理界面/</id>
    <published>2017-06-29T13:12:55.000Z</published>
    <updated>2017-09-01T01:35:55.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-全家桶实现后台管理界面"><a href="#React-全家桶实现后台管理界面" class="headerlink" title="React 全家桶实现后台管理界面"></a>React 全家桶实现后台管理界面</h1><h2 id="一、实验介绍"><a href="#一、实验介绍" class="headerlink" title="一、实验介绍"></a>一、实验介绍</h2><h3 id="1-1-实验内容"><a href="#1-1-实验内容" class="headerlink" title="1.1 实验内容"></a>1.1 实验内容</h3><p>React 是一个 Facebook 和 Instagram 用来创建用户界面的 JavaScript 库。创造 React 是为了解决一个问题：构建随着时间数据“不断变化”的“大规模”应用程序。本课程虽然使用了前端框架 antd，从零开始构建一个 React 后台管理界面，并结合 React+React-Router+React-Redux 实现页面功能，加深对 React 全家桶的理解及运用。</p>
<h3 id="1-2-实验知识点"><a href="#1-2-实验知识点" class="headerlink" title="1.2 实验知识点"></a>1.2 实验知识点</h3><ul>
<li><code>webpack</code> 基础配置及使用</li>
<li><code>React</code> 构建项目流程</li>
<li><code>Redux</code> 简介及基础使用</li>
<li>UI框架 <code>antd</code> 的基本使用</li>
<li><code>axios</code> 的基本使用</li>
<li><code>json-server</code> 模拟后台数据接口</li>
</ul>
<h3 id="1-3-实验环境"><a href="#1-3-实验环境" class="headerlink" title="1.3 实验环境"></a>1.3 实验环境</h3><ul>
<li>node.js</li>
<li>centos</li>
</ul>
<h3 id="1-4-适合人群"><a href="#1-4-适合人群" class="headerlink" title="1.4 适合人群"></a>1.4 适合人群</h3><p>本课程难度为一般，属于初级级别课程，适合具有React基础的用户，熟悉React基础知识加深巩固。</p>
<h3 id="1-5-代码获取"><a href="#1-5-代码获取" class="headerlink" title="1.5 代码获取"></a>1.5 代码获取</h3><p>你可以通过下面命令将代码下载到实验楼环境中，作为参照对比进行学习。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget http://labfile.oss.aliyuncs.com/courses/857/react.zip</div></pre></td></tr></table></figure>
<p>代码下载完成后解压并进入项目目录执行一下命令就能项目就能跑起来，打开浏览器输入127.0.0.1:3005,就能看到效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ unzip react.zip</div><div class="line">$ cd react </div><div class="line">$ npm i   #这步较慢请耐心等待</div><div class="line">$ npm run dev</div><div class="line">$ sudo npm install json-server -g</div><div class="line">$ npm run server</div></pre></td></tr></table></figure>
<h2 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h2><p>由于React 中组件间通信是单向数据流， 当项目中组件嵌套复杂时，子组件向父组件通信数据传递就变得非常复杂。所以 Fackbook 提出 Flux 来管理 React 的数据流，后续又出现不同的架构，通过对比发现 Redux 相对其他的更为简化。但 Redux 和 React 是没有必然关系的，Redux 仅仅是用于管理 state。</p>
<p>Redux 主要的组成部分为: Action，Reducer，Store。Redux 的执行流程：首先需要注册一个全局唯一的store对象，用来维护整个应用的state；当要变更state时，我们会dispatch一个action，reducer根据action更新相应的state。</p>
<p>Aciton 它可以理解为一个载体，是数据从应用传递到store的载体，其中 type 是必备的一个字段，用来标识类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//在页面中可引入这个函数并调用，产生新的state</div><div class="line">export function GetUserDetail(userDetail,totalElements,currentPage)&#123;</div><div class="line">    return&#123;</div><div class="line">        type: GET_USER_DETAIL,</div><div class="line">        userDetail,totalElements,currentPage</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Reducer 实际上就是一个函数，需要传入两个参数 state action，用来修改store的状态。本课程新建一个rootReducer.js来统一管理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//定义初始state</div><div class="line">var init=&#123;</div><div class="line">    userDetail:[],//保存从后台传递的数据</div><div class="line">    usercount: 0,</div><div class="line">    totalElements:0,</div><div class="line">    currentPage:0,</div><div class="line">    userOne:&apos;&apos;,</div><div class="line">&#125;;</div><div class="line">export default function user(state=init,action)&#123;</div><div class="line">    switch(action.type)&#123;</div><div class="line">        //case 后的名称必须与action中type保持一致</div><div class="line">        case GET_USER_DETAIL:</div><div class="line">            return Object.assign(&#123;&#125;,state,&#123;userDetail:action.userDetail,totalElements:action.totalElements,currentPage:action.currentPage&#125;);</div><div class="line">        default :</div><div class="line">            return state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Store 是一个全局对象，用来维护 state 状态的，主要有两个方法 <code>store.getState()</code> 获取最近内部的 state，<code>store.dispatch(action)</code> 连接 action，reducer 与 state。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 引入总的rootReducer</div><div class="line">import rootReducer from &quot;../reducers/rootReducer&quot;;</div><div class="line">// 引入redux，包含中间件</div><div class="line">import &#123; createStore,applyMiddleware &#125; from &apos;redux&apos;;</div><div class="line">import thunk from &apos;redux-thunk&apos;;</div><div class="line"></div><div class="line">const store=createStore(rootReducer, applyMiddleware(thunk));</div><div class="line">export default store;</div></pre></td></tr></table></figure>
<p>React-Redux 是一个轻量级的库，核心的方法只有 Provider 与 connect。 Provider 的功能主要包含以下两点：</p>
<ul>
<li>包裹原应用组件的最外层，使整个应用成为成为其子组件</li>
<li>接收 Redux 的 store 作为 props，通过context对象传递给子孙组件 connect 是真正链接 React 和 Redux 的模块</li>
</ul>
<h2 id="三、开发准备"><a href="#三、开发准备" class="headerlink" title="三、开发准备"></a>三、开发准备</h2><p>打开Xfce终端，进入 <code>Code</code> 目录，创建 <code>react</code> 文件夹, npm的下载速度较慢，我们修改npm源，这个步骤比较慢，请大家耐等待(如已经了解安装的同学，可直接下载项目的package.json放到自己的项目，npm install),安装完成之后 <code>cnpm -v</code> 查看是否安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir react &amp;&amp; cd react</div><div class="line">$ sudo npm config set registry https://registry.npm.taobao.org</div><div class="line">$ sudo npm info underscore</div></pre></td></tr></table></figure>
<p>初始化 <code>package.json</code></p>
<p>执行以下命令后，一直按enter键，如果需要对于项目名称，作者等信息进行修改，根据提示做相应的操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm init</div></pre></td></tr></table></figure>
<p>安装 <code>webpack</code> 并在根目录下创建并配置 webpack.config.js 文件</p>
<p>webpck 需要全局和本地同时安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install webpack -g</div><div class="line">$ sudo npm install webpack --save-dev</div></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;);</div><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">//__dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录</div><div class="line">module.exports = &#123;</div><div class="line">    devtool: &apos;eval-source-map&apos;, //生成Source Maps,这里选择eval-source-map</div><div class="line">    entry:[&apos;webpack/hot/dev-server&apos;, path.resolve(__dirname, &apos;./app/index.js&apos;)], //唯一入口文件</div><div class="line">    output: &#123; //输出目录</div><div class="line">        path: __dirname + &quot;/build&quot;, //打包后的js文件存放的目录</div><div class="line">        filename: &apos;bundle.js&apos;, //打包后的js文件名</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [&#123;</div><div class="line">            test: /\.jsx?$/,</div><div class="line">            exclude: /node_modules/, //屏蔽不需要处理的文件（文件夹）（可选）</div><div class="line">            loader: &apos;babel-loader&apos;</div><div class="line">        &#125;, &#123;</div><div class="line">            test: /\.css$/,</div><div class="line">            loader: &apos;style-loader!css-loader&apos;</div><div class="line">        &#125;, &#123;</div><div class="line">            test: /\.less$/,</div><div class="line">            loader: &apos;style-loader!css-loader!less-loader&apos;</div><div class="line">        &#125;, &#123;</div><div class="line">            test: /\.(png|jpg)$/,</div><div class="line">            loader: &apos;url-loader?limit=25000&apos;</div><div class="line">        &#125;]</div><div class="line">    &#125;,</div><div class="line">    plugins: [//热刷新</div><div class="line">        new webpack.HotModuleReplacementPlugin()</div><div class="line">    ],</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="四、项目文件结构"><a href="#四、项目文件结构" class="headerlink" title="四、项目文件结构"></a>四、项目文件结构</h2><p>根据文件结构新建初步项目目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir app build</div><div class="line">$ cd app mkdir actions reducers components store style views</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">├── app                 源码目录，在这个目录下做开发</div><div class="line">│   ├── actions         存储可以发出的 action</div><div class="line">│   │   ├── ajax.js     自主封装ajax</div><div class="line">│   │   ├── login.js    控制登录验证</div><div class="line">│   │   └── user.js     user的增删改查获取，弹出框控制action</div><div class="line">│   ├── components      普通组件目录(如，弹出表单组件)</div><div class="line">│   │   └── User</div><div class="line">│   │       └── AlertUser.js   编辑添加弹出Form框组件</div><div class="line">│   ├── index.js        入口文件，路由配置文件</div><div class="line">│   ├── reducers        存放action的处理器reducers</div><div class="line">│   │   ├── rootReducer.js</div><div class="line">│   │   └── user.js</div><div class="line">│   ├── store           全局 store 存储目录</div><div class="line">│   │   └── store.js</div><div class="line">│   ├── style           样式目录</div><div class="line">│   │   └── index.css</div><div class="line">│   └── views           容器组件存放目录</div><div class="line">│       ├── Index.js</div><div class="line">│       ├── Login.js</div><div class="line">│       ├── Menu.js</div><div class="line">│       └── User.js</div><div class="line">├── build               打包后文件存储目录及模板文件存放位置 </div><div class="line">│   ├── bundle.js</div><div class="line">│   └── index.html</div><div class="line">├── .babelrc            babel配置文件(默认隐藏)</div><div class="line">├── db.json             模拟后台数据</div><div class="line">├── package.json        npm配置文件</div><div class="line">└── webpack.config.js   webpack配置文件</div></pre></td></tr></table></figure>
<h2 id="五、实验步骤"><a href="#五、实验步骤" class="headerlink" title="五、实验步骤"></a>五、实验步骤</h2><h3 id="5-1-安装-React-的系列依赖"><a href="#5-1-安装-React-的系列依赖" class="headerlink" title="5.1 安装 React 的系列依赖"></a>5.1 安装 React 的系列依赖</h3><p>本课程 react-router 的版本使用3.0.5，redux-thunk 一个中间件，可以让action创建函数先不返回一个action对象，而是返回一个函数，函数传递两个参数(dispatch,getState),在函数体内进行业务逻辑的封装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --save-dev react react-dom redux react-redux react-router@3.0.5 react-redux-router redux-thunk</div></pre></td></tr></table></figure>
<h3 id="5-2-安装-Babel-并在根目录下创建并配置-babelrc-文件"><a href="#5-2-安装-Babel-并在根目录下创建并配置-babelrc-文件" class="headerlink" title="5.2 安装 Babel 并在根目录下创建并配置 .babelrc 文件"></a>5.2 安装 Babel 并在根目录下创建并配置 .babelrc 文件</h3><p>使用JSX，可以极大的简化React元素的创建，其语法风格类似于HTML语法风格，让习惯html的人更容易理解。但浏览器引擎并不能识别JSX语法，而 Babel 可以Jsx语法转化为可是别的。这只是 Babel 的一个作用，它还会将ES6,ES7转化为能识别的ES*。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --save-dev babel-core babel-loader  babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure>
<p>.babelrc (在react目录下新建)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;:[</div><div class="line">        &quot;es2015&quot;,</div><div class="line">        &quot;react&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-3-安装-webpack-所需要的-loader"><a href="#5-3-安装-webpack-所需要的-loader" class="headerlink" title="5.3 安装 webpack 所需要的 loader"></a>5.3 安装 webpack 所需要的 loader</h3><p>现今浏览器引擎不能是被 react 的 JSX 语法，需通过Babel</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --save-dev babel-loader css-loader less-loader style-loader url-loader file-loader</div></pre></td></tr></table></figure>
<h3 id="5-4-安装-webpack-dev-server"><a href="#5-4-安装-webpack-dev-server" class="headerlink" title="5.4 安装 webpack-dev-server"></a>5.4 安装 webpack-dev-server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install --save-dev webpack-dev-server</div></pre></td></tr></table></figure>
<p>安装完成后在 webpack.config.js 的 module 中添加devServer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">    contentBase: &quot;./build&quot;, //默认webpack-dev-server会为根文件夹提供本地服务器，本实例设置 build 目录</div><div class="line">    historyApiFallback: true, //开发单页应用时，如果设置为true，所有的跳转将指向index.html</div><div class="line">    inline: true, //设置为true，自动刷新页面</div><div class="line">    port: 3001, //设置默认监听端口,默认为&quot;8080&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需在package.json 文件的 scripts 中添加 build 及 dev 以后直接使用 <code>npm run dev</code> 就能开启页面查看实现效果，并能实现热刷新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">   &quot;build&quot;: &quot;webpack&quot;,</div><div class="line">   &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors --content-base build&quot;,</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="5-5-安装并配置-json-server-模拟后台数据接口"><a href="#5-5-安装并配置-json-server-模拟后台数据接口" class="headerlink" title="5.5 安装并配置 json-server 模拟后台数据接口"></a>5.5 安装并配置 json-server 模拟后台数据接口</h3><p>json-server 使用第三方库真实化模拟数据,但是数据传输的端口及 config 文件需要手动配置，这里为了方便后续使用我们在 package.json 文件的 scripts 中添加 server 后续使用 <code>npm run server</code> 就能开启后台数据接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">   &quot;server&quot;: &quot;json-server db.json -w -p 3000&quot;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>终端执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install json-server --save-dev </div><div class="line">$ vi db.json</div></pre></td></tr></table></figure>
<p>db.json</p>
<p>因为是用户列表，所以初步设计的用户信息包含 id(唯一值)，name，age，email，user_type(识别用户身份，0-普通用户，1-标准会员，2-高级会员)文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;user&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;大毛&quot;,</div><div class="line">      &quot;username&quot;: &quot;admin&quot;,</div><div class="line">      &quot;email&quot;: &quot;123456@qq.com&quot;,</div><div class="line">      &quot;password&quot;: &quot;000000&quot;,</div><div class="line">      &quot;user_type&quot;: 2,</div><div class="line">      &quot;id&quot;: 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;id&quot;: 2,</div><div class="line">      &quot;name&quot;: &quot;王二麻子&quot;,</div><div class="line">      &quot;age&quot;: 18,</div><div class="line">      &quot;email&quot;: &quot;123@qq.com&quot;,</div><div class="line">      &quot;user_type&quot;: 0,</div><div class="line">      &quot;username&quot;: &quot;admin1&quot;,</div><div class="line">      &quot;password&quot;: 123456789</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;张三&quot;,</div><div class="line">      &quot;username&quot;: &quot;admin3&quot;,</div><div class="line">      &quot;email&quot;: &quot;123@qq.com&quot;,</div><div class="line">      &quot;password&quot;: &quot;000000&quot;,</div><div class="line">      &quot;user_type&quot;: 2,</div><div class="line">      &quot;id&quot;: 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;admin&quot;,</div><div class="line">      &quot;username&quot;: &quot;admin4&quot;,</div><div class="line">      &quot;email&quot;: &quot;123@123456.com&quot;,</div><div class="line">      &quot;password&quot;: &quot;000000&quot;,</div><div class="line">      &quot;user_type&quot;: 0,</div><div class="line">      &quot;id&quot;: 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;aaaa&quot;,</div><div class="line">      &quot;username&quot;: &quot;aaaa&quot;,</div><div class="line">      &quot;email&quot;: &quot;aaa@11.com&quot;,</div><div class="line">      &quot;password&quot;: &quot;222222&quot;,</div><div class="line">      &quot;user_type&quot;: 0,</div><div class="line">      &quot;id&quot;: 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;ffff&quot;,</div><div class="line">      &quot;username&quot;: &quot;222@qq.com&quot;,</div><div class="line">      &quot;email&quot;: &quot;222@qq.com&quot;,</div><div class="line">      &quot;password&quot;: &quot;000000&quot;,</div><div class="line">      &quot;user_type&quot;: 1,</div><div class="line">      &quot;id&quot;: 7</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-6-antd-axios-的简介及安装"><a href="#5-6-antd-axios-的简介及安装" class="headerlink" title="5.6 antd axios 的简介及安装"></a>5.6 antd axios 的简介及安装</h3><p>Ant Design 简称antd，是蚂蚁金服开发并正在使用的一套企业级的前端设计语言和基于 React 的前端框架实现，用于构建丰富的交互式用户界面。其官网地址：<a href="https://ant.design/docs/react/introduce/" target="_blank" rel="external">https://ant.design/docs/react/introduce/</a>.</p>
<p>axios 是一个基于Promise 的 HTTP 客户端，可同时在浏览器和 node.js 中使用。参考：<a href="https://www.npmjs.com/package/axios" target="_blank" rel="external">https://www.npmjs.com/package/axios</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install antd axios --save-dev</div></pre></td></tr></table></figure>
<h3 id="5-7-新建模板文件-index-html"><a href="#5-7-新建模板文件-index-html" class="headerlink" title="5.7 新建模板文件 index.html"></a>5.7 新建模板文件 index.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd build </div><div class="line">$ vi index.html</div></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head lang=&quot;en&quot;&gt;</div><div class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">        &lt;title&gt;React Test&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">         &lt;!--要插入React组件的位置--&gt;</div><div class="line">        &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;!-- 引入打包后的文件(相对路径) --&gt;</div><div class="line">        &lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;/body</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="5-6-新建入口文件-index-js-并利用-react-router-构建本项目的路由"><a href="#5-6-新建入口文件-index-js-并利用-react-router-构建本项目的路由" class="headerlink" title="5.6 新建入口文件 index.js 并利用 react-router 构建本项目的路由"></a>5.6 新建入口文件 index.js 并利用 react-router 构建本项目的路由</h3><p>首先，本项目实现的页面包含:登录，首页，用户列表 三个页面，所以在构建路由时需要实现页面间的跳转。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd app </div><div class="line">$ vi index.js</div></pre></td></tr></table></figure>
<p>index.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">//引入react,react-dom</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class="line">// 引入React-Router模块</div><div class="line">//引入react,react-dom</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class="line">import &#123;</div><div class="line">    Provider</div><div class="line">&#125;from &quot;react-redux&quot;;</div><div class="line"></div><div class="line">// 引入React-Router模块</div><div class="line">import &#123; Router, Route, Link, hashHistory, IndexRoute &#125; from &apos;react-router&apos;;</div><div class="line">import store from &quot;./store/store&quot;;</div><div class="line">// 全局引入Ant-Design样式</div><div class="line">import &quot;antd/dist/antd.min.css&quot;;</div><div class="line">//引入全局样式</div><div class="line">import &apos;./style/index.css&apos;</div><div class="line"></div><div class="line">//引入自定义组件</div><div class="line">import Login from &quot;./views/Login&quot;;//登录页面</div><div class="line">import User from &quot;./views/User&quot;//用户列表</div><div class="line">import Menu from &quot;./views/Menu&quot;//侧边栏菜单</div><div class="line">import Index from &quot;./views/Index&quot;//欢迎页面</div><div class="line"></div><div class="line">// 配置路由</div><div class="line">render((</div><div class="line">    &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">        &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">            &lt;Route path=&quot;/login&quot; component=&#123;Login&#125; /&gt;</div><div class="line">            &lt;Route path=&quot;/&quot; component=&#123;Menu&#125; &gt;</div><div class="line">                &lt;IndexRoute component=&#123;Index&#125;/&gt;</div><div class="line">                &lt;Route path=&quot;user&quot; component=&#123;User&#125; /&gt;</div><div class="line">            &lt;/Route&gt;</div><div class="line">        &lt;/Router&gt;</div><div class="line">    &lt;/Provider&gt;</div><div class="line">),document.getElementById(&apos;content&apos;));</div></pre></td></tr></table></figure>
<h3 id="5-6-构建页面"><a href="#5-6-构建页面" class="headerlink" title="5.6 构建页面"></a>5.6 构建页面</h3><p>本课程主要的页面包含4个，登录页面，菜单页，首页及用户列表页面,页面的代码实现都在views目录下。主要的业务逻辑用户列表，包含查询，添加，编辑，删除。而编辑与新建时弹出的模态框封装在 components 目录下.</p>
<p>首先我们需要构建一个全局的store用于管理state，在app/store 目录下创建 <code>store.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 引入总的rootReducer</div><div class="line">import rootReducer from &quot;../reducers/rootReducer&quot;;</div><div class="line">// 引入redux，包含中间件</div><div class="line">import &#123; createStore,applyMiddleware &#125; from &apos;redux&apos;;</div><div class="line">import thunk from &apos;redux-thunk&apos;;</div><div class="line"></div><div class="line">const store=createStore(rootReducer, applyMiddleware(thunk));</div><div class="line">export default store;</div></pre></td></tr></table></figure>
<p>在app/reducers构建一个总的reducer管理文件rootReduce.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">    combineReducers</div><div class="line">&#125; from &quot;redux&quot;;</div><div class="line">//引入每个页面的reducer</div><div class="line">import user from &quot;./user&quot;;</div><div class="line">var rootReducer=combineReducers(&#123;</div><div class="line">    user,</div><div class="line">&#125;);</div><div class="line">export default rootReducer;</div></pre></td></tr></table></figure>
<p>做到这里，我们就可以根据路由引入文件在 <code>view</code> 目录下编写自己的页面，如果需要有行为,如:增加，需在action目录下创建，如页面内需要使用到 state 信息，需要reducers目录对应创建，详细需根据项目创建。以下是以编辑功能作为实例进行介绍。</p>
<p>User.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">import &#123;</div><div class="line">    userOneFun,showModal,</div><div class="line">&#125; from &quot;../actions/user&quot;;</div><div class="line">import &#123;</div><div class="line">    connect</div><div class="line">&#125; from &quot;react-redux&quot;;</div><div class="line">//引入弹出框Form表单</div><div class="line">import AlertUser from &quot;../components/User/AlertUser&quot;</div><div class="line">class User extends React.Component &#123;</div><div class="line">    //编辑用户</div><div class="line">    toEdit(id) &#123;</div><div class="line">        //获取单行数据,存储在userOne中</div><div class="line">        this.props.dispatch(userOneFun(id));</div><div class="line">        //显示弹出框</div><div class="line">        this.props.dispatch(showModal(true));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">        const columns = [&#123;</div><div class="line">                title: &apos;操作&apos;,</div><div class="line">                key: &apos;action&apos;,</div><div class="line">                render: (text, record) =&gt; (//record表示单行数据</div><div class="line">                    &lt;span &gt;</div><div class="line">                        &lt;Button onClick=&#123;()=&gt;this.toEdit(record.id)&#125;&gt; 编辑 &lt;/Button&gt;</div><div class="line">                    &lt;/span &gt;</div><div class="line">                ),</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">        return(</div><div class="line">            &lt;Layout&gt;</div><div class="line">                &lt;Content&gt;</div><div class="line">                    &#123;/* AlertUser组件 */&#125;</div><div class="line">                    &lt;AlertUser /&gt;</div><div class="line">                &lt;/Content&gt;</div><div class="line">            &lt;/Layout&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line"></div><div class="line">function select(state)&#123;</div><div class="line">    return&#123;</div><div class="line">        userOne:state.user.userOne,</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//导出组件</div><div class="line">export default connect(select) (User);</div></pre></td></tr></table></figure>
<p>actions user.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">//ajax是自主封装的文件</div><div class="line">import * as Ajax from &apos;./ajax&apos;;</div><div class="line"></div><div class="line">//定义常量</div><div class="line">export const GET_USER_DETAIL = &quot;GET_USER_DETAIL&quot;</div><div class="line">export const GET_USER_ONE = &quot;GET_USER_ONE&quot;</div><div class="line">export const GET_MODAL_SHOW = &quot;GET_MODAL_SHOW&quot;</div><div class="line"></div><div class="line">//获取所有用户列表</div><div class="line">export function GetUserDetail(userDetail,totalElements,currentPage)&#123;</div><div class="line">    return&#123;</div><div class="line">        type:GET_USER_DETAIL,</div><div class="line">        userDetail,totalElements,currentPage</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export function ascyGetDetails(data)&#123;</div><div class="line">    return function (dispatch)&#123;</div><div class="line">        Ajax.getAjax(&quot;http://localhost:3000/user&quot;,function(response)&#123;</div><div class="line">            if (response.data) &#123;</div><div class="line">                let number = 1;</div><div class="line">                if (data) &#123;</div><div class="line">                    number = data.page</div><div class="line">                &#125;</div><div class="line">                dispatch(GetUserDetail(response.data,response.data.length,number));</div><div class="line">            &#125; else &#123;</div><div class="line">                dispatch(GetUserDetail([],0,1));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//新增与修改用户，通过有无id判断是添加还是删除</div><div class="line">export function AddUser(data)&#123;</div><div class="line">    return function (dispatch)&#123;</div><div class="line">        if (data.id) &#123;</div><div class="line">            Ajax.putAjax(&quot;http://localhost:3000/user/&quot;+data.id,data,function(response)&#123;</div><div class="line">                if(response.data)&#123;</div><div class="line">                    //成功后刷新页面</div><div class="line">                    dispatch(ascyGetDetails());</div><div class="line">                    //成功后关闭form弹出框</div><div class="line">                    dispatch(showModal(false));</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; else &#123;</div><div class="line">            Ajax.postAjax(&quot;http://localhost:3000/user&quot;,data,function(response)&#123;</div><div class="line">                if(response.data)&#123;</div><div class="line">                    dispatch(ascyGetDetails());</div><div class="line">                    dispatch(showModal(false));</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//点击编辑时获取每行数据</div><div class="line">function getUserone(userOne)&#123;</div><div class="line">    return&#123;</div><div class="line">        type:GET_USER_ONE,</div><div class="line">        userOne</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export function userOneFun(id)&#123;</div><div class="line">    return function (dispatch)&#123;</div><div class="line">        Ajax.getAjax(&quot;http://localhost:3000/user/&quot;+id,function(response)&#123;</div><div class="line">            if(response.data)&#123;</div><div class="line">                //将返回的每行数据传给getUserone</div><div class="line">                dispatch(getUserone(response.data));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//新增或编辑时控制弹出框的显示与隐藏,将状态值保存至modaldisplay中</div><div class="line">export function showModal(modaldisplay)&#123;</div><div class="line">    return&#123;</div><div class="line">        type:GET_MODAL_SHOW,</div><div class="line">        modaldisplay</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>reducers user.js 链接 action 和 store, 根据不同的action返回不同state</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import &#123; GET_USER_DETAIL, GET_USER_ONE,GET_MODAL_SHOW &#125; from &apos;../actions/user&apos;</div><div class="line">//初始state</div><div class="line">let init=&#123;</div><div class="line">    userDetail:[],</div><div class="line">    totalElements:0,</div><div class="line">    currentPage:0,</div><div class="line">    userOne:&apos;&apos;,</div><div class="line">    modaldisplay:false</div><div class="line">&#125;;</div><div class="line">export default function user(state=init,action)&#123;</div><div class="line">    switch(action.type)&#123;</div><div class="line">        //用户的所有信息，用于开始的展示</div><div class="line">        case GET_USER_DETAIL:</div><div class="line">            return Object.assign(&#123;&#125;,state,&#123;userDetail:action.userDetail,totalElements:action.totalElements,currentPage:action.currentPage&#125;);</div><div class="line">        //点击编辑时，取得当前用户信息</div><div class="line">        case GET_USER_ONE:</div><div class="line">            return Object.assign(&#123;&#125;,state,&#123;userOne:action.userOne&#125;);</div><div class="line">        //控制弹出框的显示与隐藏</div><div class="line">        case GET_MODAL_SHOW:</div><div class="line">            return Object.assign(&#123;&#125;,state,&#123;modaldisplay:action.modaldisplay&#125;);</div><div class="line">        default :</div><div class="line">            return state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、实验总结"><a href="#六、实验总结" class="headerlink" title="六、实验总结"></a>六、实验总结</h2><p>本课程基于 React 全家桶进行了简单项目的构建，从零开始搭建项目不仅能回顾基础知识，引入 Redux 也解决了我们单个 React 项目中的组件间通信困难的问题，加深对 React 项目的理解及使用，学会使用 antd UI框架，能更快节省开发周期，本课程设计的 antd 组件较少，可以根据官网API自主学习。</p>
<h2 id="八、参考链接"><a href="#八、参考链接" class="headerlink" title="八、参考链接"></a>八、参考链接</h2><p><a href="http://www.redux.org.cn/" target="_blank" rel="external">Redux中文文档</a></p>
<p><a href="https://ant.design/docs/react/introduce/" target="_blank" rel="external">antd参考文档</a></p>
<p><a href="https://www.npmjs.com/package/axios" target="_blank" rel="external">axiosAPI</a></p>
<p><code>文章引用自实验楼，转载请注明来源</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-全家桶实现后台管理界面&quot;&gt;&lt;a href=&quot;#React-全家桶实现后台管理界面&quot; class=&quot;headerlink&quot; title=&quot;React 全家桶实现后台管理界面&quot;&gt;&lt;/a&gt;React 全家桶实现后台管理界面&lt;/h1&gt;&lt;h2 id=&quot;一、实验介
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>你真的知道JavaScript吗</title>
    <link href="http://yoursite.com/2017/02/18/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3JS%E5%90%97%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/02/18/你真的了解JS吗？/</id>
    <published>2017-02-18T11:12:11.000Z</published>
    <updated>2017-08-21T10:10:28.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你真的知道JavaScript吗"><a href="#你真的知道JavaScript吗" class="headerlink" title="你真的知道JavaScript吗"></a><a href="#你真的知道JavaScript吗" title="你真的知道JavaScript吗"></a>你真的知道JavaScript吗</h1><blockquote>
<p>JavaScript是一门<strong>奇怪</strong>的语言，要真正掌握并不容易。废话不多说，来一个快速测试，5道题目，看看你对JavaScript是否真正掌握。准备好了吗？开始咯😄</p>
</blockquote>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="#题目" title="题目"></a>题目</h2><h3 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a><a href="#No-1" title="No.1"></a>No.1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (!(&quot;a&quot; in window)) &#123;</div><div class="line">    var a = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(a);</div></pre></td></tr></table></figure>
<h3 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a><a href="#No-2" title="No.2"></a>No.2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 1,</div><div class="line">    b = function a(x) &#123;</div><div class="line">        x &amp;&amp; a(--x);</div><div class="line">    &#125;;</div><div class="line">console.log(a);</div></pre></td></tr></table></figure>
<h3 id="No-3"><a href="#No-3" class="headerlink" title="No.3"></a><a href="#No-3" title="No.3"></a>No.3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function a(x) &#123;</div><div class="line">    return x * 2;</div><div class="line">&#125;</div><div class="line">var a;</div><div class="line">console.log(a);</div></pre></td></tr></table></figure>
<h3 id="No-4"><a href="#No-4" class="headerlink" title="No.4"></a><a href="#No-4" title="No.4"></a>No.4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function b(x, y, a) &#123;</div><div class="line">    arguments[2] = 10;</div><div class="line">    console.log(a);</div><div class="line">&#125;</div><div class="line">b(1, 2, 3);</div></pre></td></tr></table></figure>
<h3 id="No-5"><a href="#No-5" class="headerlink" title="No.5"></a><a href="#No-5" title="No.5"></a>No.5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function a() &#123;</div><div class="line">    console.log(this);</div><div class="line">&#125;</div><div class="line">a.call(null);</div></pre></td></tr></table></figure>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a><a href="#解析" title="解析"></a>解析</h2><h3 id="No-1-1"><a href="#No-1-1" class="headerlink" title="No.1"></a><a href="#No-1-1" title="No.1"></a>No.1</h3><pre><code>在浏览器环境中，全局变量都是`window`的一个属性，即
</code></pre><p><code>var a = 1</code> 等价于 <code>window.a = 1</code>。<code>in</code>操作符用来判断某个属性属于某个对象，可以是对象的直接属性，也可以是通过<code>prototype</code>继承的属性。<br>    再看题目，在浏览器中，如果没有全局变量 <code>a</code> ，则声明一个全局变量 <code>a</code> (ES5没有块级作用域)，并且赋值为1。很多人会认为打印的是1。非也，大家不要忘了变量声明会被前置！什么意思呢？题目也就等价于</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a;</div><div class="line"></div><div class="line">if (!(&quot;a&quot; in window)) &#123;</div><div class="line">    a = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(a);</div></pre></td></tr></table></figure>
<p>所以其实已经声明了变量<code>a</code>，只不过<code>if</code>语句之前值是<code>undefined</code>，所以<code>if</code>语句压根不会执行。<br>最后答案就是 <code>undefined</code></p>
<h3 id="No-2-1"><a href="#No-2-1" class="headerlink" title="No.2"></a><a href="#No-2-1" title="No.2"></a>No.2</h3><p>这道题有几个需要注意的地方：</p>
<ol>
<li>变量声明、函数声明会被前置，但是函数表达式并不会，准确说类似变量声明前置，举个栗子：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;b&apos;, b); // b undefined</div><div class="line">var b = function() &#123;&#125;</div><div class="line">console.log(&apos;b&apos;, b); // b function () &#123;&#125;</div></pre></td></tr></table></figure>
<p>2.具名的函数表达式的名字只能在该函数内部取到，举个例子(排除老的IE😂)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var foo = function bar () &#123;&#125;</div><div class="line"></div><div class="line">console.log(&apos;foo&apos;, foo); </div><div class="line">// foo function bar()&#123;&#125;</div><div class="line"></div><div class="line">console.log(&apos;bar&apos;, bar);</div><div class="line">// Uncaught ReferenceError: bar is not defined</div></pre></td></tr></table></figure>
<pre><code>综合这两点，再看题目，最后输出的内容就为 1
</code></pre><h3 id="No-3-1"><a href="#No-3-1" class="headerlink" title="No.3"></a><a href="#No-3-1" title="No.3"></a>No.3</h3><p>函数声明会覆盖变量声明，但不会覆盖变量赋值，举个栗子简单粗暴：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function foo()&#123;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line">var foo;</div><div class="line">console.log(typeof foo);    // &quot;function&quot;</div></pre></td></tr></table></figure>
<p>函数声明的优先级高于变量声明的优先级，但如果该变量<code>foo</code>赋值了，那结果就完全不一样了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function foo()&#123;</div><div class="line">    return 1;</div><div class="line">&#125;</div><div class="line">var foo = 1;</div><div class="line">console.log(typeof foo);    // &quot;number&quot;</div></pre></td></tr></table></figure>
<p>变量<code>foo</code>赋值以后，变量赋值初始化就覆盖了函数声明。这个需要注意<br>再看题目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function a(x) &#123;</div><div class="line">    return x * 2;</div><div class="line">&#125;</div><div class="line">var a;</div><div class="line">console.log(a); // function a(x) &#123;...&#125;</div></pre></td></tr></table></figure>
<h3 id="No-4-1"><a href="#No-4-1" class="headerlink" title="No.4"></a><a href="#No-4-1" title="No.4"></a>No.4</h3><p>这题考察 <code>arguments</code> 对象的用法(详看👉<a href="https://microzz.com/2017/04/28/arguments/" target="_blank" rel="external">JavaScript中的arguments对象</a>)<br><strong>一般情况</strong>，<code>arguments</code>与函数参数是动态绑定关系(为什么说是一般稍后会解释)，所以很好理解，最后输出的是10</p>
<p>但是但是但是，我们不要忘了一个特殊情况–严格模式，在严格模式中 <code>arguments</code> 与相当于函数参数的一个拷贝，并没有动态绑定关系，举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">// 严格模式！！</div><div class="line"></div><div class="line">function b(x, y, a) &#123;</div><div class="line">    arguments[2] = 10;</div><div class="line">    console.log(a);</div><div class="line">&#125;</div><div class="line">b(1, 2, 3); // 3</div></pre></td></tr></table></figure>
<h3 id="No-5-1"><a href="#No-5-1" class="headerlink" title="No.5"></a><a href="#No-5-1" title="No.5"></a>No.5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function a() &#123;</div><div class="line">    console.log(this);</div><div class="line">&#125;</div><div class="line">a.call(null);</div></pre></td></tr></table></figure>
<p>关于 <code>a.call(null);</code> 根据ECMAScript262规范规定：<br>如果第一个参数传入的对象调用者是<code>null</code>或者<code>undefined</code>的话，<code>call</code>方法将把全局对象（浏览器上是<code>window</code>对象）作为this的值。所以，不管你什么时候传入<code>null</code>或者 <code>undefined</code>，其<code>this</code>都是全局对象<code>window</code>。所以，在浏览器上答案是输出 <code>window</code> 对象。</p>
<p>但是但是但是，我们依旧不能忘记一个特殊情况–严格模式，在严格模式中，<code>null</code> 就是 <code>null</code>，<code>undefined</code> 就是 <code>undefined</code> ，举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">// 严格模式！！</div><div class="line"></div><div class="line">function a() &#123;</div><div class="line">    console.log(this);</div><div class="line">&#125;</div><div class="line">a.call(null); // null</div><div class="line">a.call(undefined); // undefined</div></pre></td></tr></table></figure>
<h2 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a><a href="#提醒" title="提醒"></a>提醒</h2><ol>
<li>在浏览器中的全局对象是<code>window</code>，Node.js中是<code>global</code>;</li>
<li>为了使代码更加严谨与健壮，建议写JS都加上严格模式<code>&#39;use strict&#39;;</code></li>
<li>ES6已经成为前端必备技能，呼吁大家都使用ES6，方便高效，可以使用babel把ES6转成ES5甚至ES3，尽量使用ES6推动前端的发展👍</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;你真的知道JavaScript吗&quot;&gt;&lt;a href=&quot;#你真的知道JavaScript吗&quot; class=&quot;headerlink&quot; title=&quot;你真的知道JavaScript吗&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#你真的知道JavaScript吗&quot; title=&quot;你真的
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原生JS中CSS相关API合集</title>
    <link href="http://yoursite.com/2017/02/14/%E5%8E%9F%E7%94%9FJS%E4%B8%ADCSS%E7%9B%B8%E5%85%B3API%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2017/02/14/原生JS中CSS相关API合集/</id>
    <published>2017-02-14T07:12:11.000Z</published>
    <updated>2017-08-21T10:06:25.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生JS中CSS相关API合集"><a href="#原生JS中CSS相关API合集" class="headerlink" title="原生JS中CSS相关API合集"></a>原生JS中CSS相关API合集</h1><h2 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a><a href="#类名操作" title="类名操作"></a>类名操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//ie8以下</div><div class="line">Element.className  //获取元素节点的类名</div><div class="line">Element.className += &apos; &apos; + newClassName  //新增一个类名</div><div class="line"></div><div class="line">//判断是否有某个类名</div><div class="line">function hasClass(element,className)&#123;</div><div class="line">  return new RegExp(className,&apos;gi&apos;).test(element.className);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//移除class</div><div class="line">function removeClass(element,className)&#123;</div><div class="line">  element.className = element.className.replace(new RegExp(&apos;(^|\\b)&apos; + className.split(&apos; &apos;).join(&apos;|&apos;) + &apos;(\\b|$)&apos;, &apos;gi&apos;),&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//ie10 </div><div class="line">element.classList.add(className)  //新增</div><div class="line">element.classList.remove(className)  //删除</div><div class="line">element.classList.contains(className)  //是否包含</div><div class="line">element.classList.toggle(className)  //toggle class</div></pre></td></tr></table></figure>
<h2 id="style操作"><a href="#style操作" class="headerlink" title="style操作"></a><a href="#style操作" title="style操作"></a>style操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(&apos;style&apos;,&apos;&apos;)</div><div class="line"></div><div class="line">element.style.backgroundColor = &apos;red&apos;</div><div class="line"></div><div class="line">element.style.cssText //用来读写或删除整个style属性</div><div class="line"></div><div class="line">element.style.setProperty(propertyName,value)  //设置css属性</div><div class="line">element.style.getPropertyValue(property)  //获取css属性</div><div class="line">element.style.removeProperty(property)  //删除css属性</div><div class="line">操作非内联样式</div><div class="line">//ie8</div><div class="line">element.currentStyle[attrName]</div><div class="line">//ie9+</div><div class="line">window.getComputedStyle(el,null)[attrName] </div><div class="line">window.getComputedStyle(el,null).getPropertyValue(attrName)</div><div class="line">//伪类</div><div class="line">window.getComputedStyle(el,&apos;:after&apos;)[attrName]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原生JS中CSS相关API合集&quot;&gt;&lt;a href=&quot;#原生JS中CSS相关API合集&quot; class=&quot;headerlink&quot; title=&quot;原生JS中CSS相关API合集&quot;&gt;&lt;/a&gt;原生JS中CSS相关API合集&lt;/h1&gt;&lt;h2 id=&quot;类名操作&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript编码规范指南</title>
    <link href="http://yoursite.com/2017/02/12/js%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/02/12/js编码规范/</id>
    <published>2017-02-12T08:12:11.000Z</published>
    <updated>2017-08-21T09:56:25.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript编码规范指南"><a href="#JavaScript编码规范指南" class="headerlink" title="JavaScript编码规范指南"></a>JavaScript编码规范指南</h1><p>=====================<br><em>常用的一些javascript规范</em></p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><a href="#数据类型" title="数据类型"></a>数据类型</h2><ul>
<li><p><strong>原始类型(Primitives)</strong>：当你给一个原始类型赋值时，返回的是这个值的本身。</p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><p><code>undefined</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var foo = 1,</div><div class="line">  bar = foo;</div><div class="line"></div><div class="line">bar = 9;</div><div class="line"></div><div class="line">console.log(foo, bar); // =&gt; 1, 9</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>对象类型</strong>:当你给一个对象类型赋值时，返回的是这个值的引用。</p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><p><code>function</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var foo = [1, 2],</div><div class="line">  bar = foo;</div><div class="line"></div><div class="line">bar[0] = 9;</div><div class="line"></div><div class="line">console.log(foo[0], bar[0]); // =&gt; 9, 9</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a href="#对象" title="对象"></a>对象</h2><ul>
<li><p>新建一个对象的语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">var item = new Object();</div><div class="line"></div><div class="line">//推荐</div><div class="line">var item = &#123;&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用<a href="http://es5.github.io/#x7.6.1" target="_blank" rel="external">保留字</a>作为键值，否则在IE8下面会出现问题(<a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="external">详情</a>)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">var superman = &#123;</div><div class="line">  default: &#123; clark: &apos;kent&apos;&#125;,</div><div class="line">  private: true</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//推荐</div><div class="line">var superman =&#123;</div><div class="line">  defaults: &#123; clark: &apos;kent&apos;&#125;,</div><div class="line">  hidden: true</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>使用可读性强的同义词代替保留字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">var superman = &#123;</div><div class="line">  class: &apos;alien&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//不推荐</div><div class="line">var superman = &#123;</div><div class="line">  klass: &apos;alien&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//推荐</div><div class="line">var superman = &#123;</div><div class="line">  type: &apos;alien&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a href="#数组" title="数组"></a>数组</h2><ul>
<li><p>新建一个数组的语法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">var items = new Array();</div><div class="line"></div><div class="line">//推荐</div><div class="line">var items = [];</div></pre></td></tr></table></figure>
</li>
<li><p>如果你不知道数组的长度可以使用push将元素加入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var someStack = [];</div><div class="line"></div><div class="line">//不推荐</div><div class="line">someStack[someStack.length] = &apos;something&apos;;</div><div class="line"></div><div class="line">//推荐</div><div class="line">someStack.push(&apos;something&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>当你需要复制一个数组的时候使用slice。<a href="http://jsperf.com/converting-arguments-to-an-array/7" target="_blank" rel="external">jsPerf</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var len = items.length,</div><div class="line">  itemsCopy = [],</div><div class="line">  i;</div><div class="line"></div><div class="line">//不推荐</div><div class="line">for (i = 0; i &lt; len; i++)&#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//推荐</div><div class="line">itemsCopy = items.slice();</div></pre></td></tr></table></figure>
</li>
<li><p>用slice转换伪数组对象到数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function trigger() &#123;</div><div class="line">  var args = Array.prototype.slice.call(arguments);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a><a href="#String类型" title="String类型"></a>String类型</h2><ul>
<li><p>使用单引号<code>&#39;&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">var name = &quot;Bob Parr&quot;;</div><div class="line"></div><div class="line">//推荐</div><div class="line">var name = &apos;Bob Parr&apos;;</div><div class="line"></div><div class="line">//不推荐</div><div class="line">var fullName - &quot;Bob &quot; + this.lastName;</div><div class="line"></div><div class="line">//推荐</div><div class="line">var fullName = &apos;Bob &apos; + this.lastName;</div></pre></td></tr></table></figure>
</li>
<li><p>当字符串长度超过80个时，应该通过字符串连接多行显示。</p>
</li>
<li><p>注意：过度使用字符串连接将会影响性能。<a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a>&amp;<a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">Discussion</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">var errorMessage = &apos;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&apos;;</div><div class="line"></div><div class="line">//不推荐</div><div class="line">var errorMessage = &apos;This is a super long error that \</div><div class="line">was thrown because of Batman. \</div><div class="line">When you stop to think about \</div><div class="line">how Batman had anything to do \</div><div class="line">with this, you would get nowhere \</div><div class="line">fast.&apos;;</div><div class="line"></div><div class="line">//推荐</div><div class="line">var errorMessage = &apos;This is a super long error that &apos; +</div><div class="line">  &apos;was thrown because of Batman.&apos; +</div><div class="line">  &apos;When you stop to think about &apos; +</div><div class="line">  &apos;how Batman had anything to do &apos; +</div><div class="line">  &apos;with this, you would get nowhere &apos; +</div><div class="line">  &apos;fast.&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>当程序建立一个字符串时， 使用join代替字符串连接。特别是在IE下：<a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">jsPerf</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">var items,</div><div class="line">    messages,</div><div class="line">    length, i;</div><div class="line"></div><div class="line">messages = [&#123;</div><div class="line">    state: &apos;success&apos;,</div><div class="line">    message: &apos;This one worked.&apos;</div><div class="line">&#125;,&#123;</div><div class="line">    state: &apos;success&apos;,</div><div class="line">    message: &apos;This one worked as well.&apos;</div><div class="line">&#125;,&#123;</div><div class="line">    state: &apos;error&apos;,</div><div class="line">    message: &apos;This one did not work.&apos;</div><div class="line">&#125;];</div><div class="line"></div><div class="line">length = messages.length;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">function inbox(messages) &#123;</div><div class="line">  items = &apos;&lt;ul&gt;&apos;;</div><div class="line"></div><div class="line">  for (i = 0; i &lt; length; i++) &#123;</div><div class="line">    items += &apos;&lt;li&gt;&apos; + messages[i].message + &apos;&lt;/li&gt;&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return items + &apos;&lt;/ul&gt;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">function inbox(messages) &#123;</div><div class="line">  items = [];</div><div class="line"></div><div class="line">  for (i = 0; i &lt; length; i++) &#123;</div><div class="line">    items[i] = messages[i].message;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return &apos;&lt;ul&gt;&lt;li&gt;&apos; + items.join(&apos;&lt;/li&gt;&lt;li&gt;&apos;) + &apos;&lt;/li&gt;&lt;/ul&gt;&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a href="#函数" title="函数"></a>函数</h2><ul>
<li><p>函数表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 匿名函数表达式</div><div class="line">var anonymous = function()&#123;</div><div class="line">  return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 命名函数表达式</div><div class="line">var named = function named() &#123;</div><div class="line">  return true;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 立即执行的函数表达式（IIFE）</div><div class="line">(function()&#123;</div><div class="line">  console.log(&apos;Welcome to the Internet. Please follow me.&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
</li>
<li><p>不要将函数声明放在如if/while循环或其他任何语句中。但可以用函数表达式来替代函数声明这么做。一些浏览器可能的确可以在语句中使用函数声明。但是在解析方面的处理各不相同，各种浏览器下兼容性很不好。</p>
</li>
<li><p><strong>注意:</strong> ECMA-262定义了一系列的语句，但是函数声明并没有被归类为真正的语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">关于这点可查看ECMA-262的文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">if (currentUser)&#123;</div><div class="line">  function test() &#123;</div><div class="line">    console.log(&apos;Nope.&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//推荐</div><div class="line">if (currentUser)&#123;</div><div class="line">  var test = function test() &#123;</div><div class="line">    console.log(&apos;Yup.&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>arguments</code> 不能作为一个参数的名字， 因为这会覆盖每一个函数内的<code>arguments</code>对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//不推荐</div><div class="line">function nope(name, options, arguments) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;</div><div class="line"></div><div class="line">//推荐</div><div class="line">function yup(name, options, args) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a href="#属性" title="属性"></a>属性</h2><ul>
<li><p>访问一个属性时，使用点的形式取值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var luke = &#123;</div><div class="line">  jedi: true,</div><div class="line">  age: 28</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">var isJedi = luke[&apos;jedi&apos;];</div><div class="line"></div><div class="line">// 推荐</div><div class="line">var isJedi = luke.jedi;</div></pre></td></tr></table></figure>
</li>
<li><p>需要一个变量访问一个属性时，使用“[]”来取值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var luke = &#123;</div><div class="line">  jedi: true,</div><div class="line">  age: 28</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function getProp(prop) &#123;</div><div class="line">  return luke[prop];</div><div class="line">&#125;</div><div class="line"></div><div class="line">var isJedi = getProp(&apos;jedi&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a href="#变量" title="变量"></a>变量</h2><ul>
<li><p>总是使用 <code>var</code> 来定义变量。如果不这么做将定义一个全局变量出来。我们希望避免全局命名空间的污染。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">superPower = new SuperPower();</div><div class="line"></div><div class="line">// 推荐</div><div class="line">var superPower = new SuperPower();</div></pre></td></tr></table></figure>
</li>
<li><p>使用一个<code>var</code> 声明多个变量，并且每声明一个变量就换一行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">var items = getItems();</div><div class="line">var goSportsTeam = true;</div><div class="line">var dragonball = &apos;z&apos;;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">var items = getItems(),</div><div class="line">    goSportsTeam = true,</div><div class="line">    dragonball = &apos;z&apos;;</div></pre></td></tr></table></figure>
</li>
<li><p>声明多个变量时，把不赋值的变量放在后面。这样做是有好处的，如果日后你想给未赋值变量赋值的时候，可能要引用到上面已经赋值的变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">var i, len, dragonball,</div><div class="line">    items = getItems(),</div><div class="line">    goSportsTeam = true;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">var i, items = getItems(),</div><div class="line">    dragonball,</div><div class="line">    goSportsTeam = true,</div><div class="line">    len;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">var items = getItems(),</div><div class="line">    goSportsTeam = true,</div><div class="line">    dragonball,</div><div class="line">    length,</div><div class="line">    i;</div></pre></td></tr></table></figure>
</li>
<li><p>在一个作用域的顶部给一个变量赋值。这样有助于避开，变量声明和声明提前的分配问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">function() &#123;</div><div class="line">  test();</div><div class="line">  console.log(&apos;doing stuff..&apos;);</div><div class="line"></div><div class="line">  //..other stuff..</div><div class="line"></div><div class="line">  var name = getName();</div><div class="line"></div><div class="line">  if (name === &apos;test&apos;) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">function() &#123;</div><div class="line">  var name = getName();</div><div class="line"></div><div class="line">  test();</div><div class="line">  console.log(&apos;doing stuff..&apos;);</div><div class="line"></div><div class="line">  //..other stuff..</div><div class="line"></div><div class="line">  if (name === &apos;test&apos;) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">function() &#123;</div><div class="line">  var name = getName();</div><div class="line"></div><div class="line">  if (!arguments.length) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">function() &#123;</div><div class="line">  if (!arguments.length) &#123;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var name = getName();</div><div class="line"></div><div class="line">  return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a><a href="#声明提前" title="声明提前"></a>声明提前</h2><ul>
<li><p>不管你在何处给一个变量声明或赋值，javascript解析器都会事先在作用域的顶端做声明提前（Hoisting）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 我们知道下面将不能正常运行（假设没有全局变量）</div><div class="line">function example() &#123;</div><div class="line">  console.log(notDefined); // =&gt; 抛出一个引用错误</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 在引用这个变量之后，给这个变量赋值将不会抛异常，这是因为javascript解析器有声明提前。</div><div class="line">// 注意：赋的“true”值，不会被提前。</div><div class="line">function example() &#123;</div><div class="line">  console.log(declaredButNotAssigned); // =&gt; undefined</div><div class="line">  var declaredButNotAssigned = true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// javascript解析器,会在作用域的顶部提前声明变量。</div><div class="line">// 用代码描述出来，其实就等同于下面这种情况。</div><div class="line">function example() &#123;</div><div class="line">  var declaredButNotAssigned;</div><div class="line">  console.log(declaredButNotAssigned); // =&gt; undefined</div><div class="line">  declaredButNotAssigned = true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>匿名函数表达式将该变量名做了提前声明，没有给该变量赋值函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function example() &#123;</div><div class="line">  console.log(anonymous); // =&gt; undefined</div><div class="line"></div><div class="line">  anonymous(); // =&gt; 抛出异常，anonymous 不是一个函数</div><div class="line"></div><div class="line">  var anonymous = function() &#123;</div><div class="line">    console.log(&apos;anonymous function expression&apos;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>和匿名一样，有名函数表达式将该变量名做了提前声明，没有给该变量赋值函数名和函数体。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function example() &#123;</div><div class="line">  console.log(named); // =&gt; undefined</div><div class="line"></div><div class="line">  named(); // =&gt; 抛出异常， named 不是一个函数</div><div class="line"></div><div class="line">  superPower(); // =&gt; 抛出异常， superPower 没定义</div><div class="line"></div><div class="line">  var named = function superPower() &#123;</div><div class="line">    console.log(&apos;Flying&apos;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 把函数名改成和变量名一样，也得出同样的结果。</div><div class="line">function example() &#123;</div><div class="line">  console.log(named); // =&gt; undefined</div><div class="line"></div><div class="line">  named(); // =&gt; 抛出异常， named 不是一个函数</div><div class="line"></div><div class="line">  var named = function named() &#123;</div><div class="line">    console.log(&apos;named&apos;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数声明会将函数名和函数体声明提前。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function example() &#123;</div><div class="line">  superPower(); // =&gt; Flying</div><div class="line"></div><div class="line">  function superPower() &#123;</div><div class="line">    console.log(&apos;Flying&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>更多信息请参照 <a href="http://www.adequatelygood.com/" target="_blank" rel="external">Ben Cherry</a> 的 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting" target="_blank" rel="external">JavaScript Scoping &amp; Hoisting</a></p>
</li>
</ul>
<h2 id="条件表达式与等式"><a href="#条件表达式与等式" class="headerlink" title="条件表达式与等式"></a><a href="#条件表达式与等式" title="条件表达式与等式"></a>条件表达式与等式</h2><ul>
<li><p>使用 <code>===</code> 和 <code>!==</code> 代替 <code>==</code> 和 <code>!=</code>。</p>
</li>
<li><p>条件表达式 会通过 <code>ToBoolean</code> 来进行强制转化，而且遵循以下的规则：</p>
<ul>
<li><strong>对象</strong>被转化为<strong>true</strong></li>
<li><strong>Undefined</strong>被转化为<strong>false</strong></li>
<li><strong>Null</strong>被转化为<strong>false</strong></li>
<li><strong>布尔值</strong>被转化为<strong>相应的布尔值</strong></li>
<li><strong>数字</strong>当值为<strong>+0</strong>,<strong>-0</strong>或<strong>NaN</strong>时转化为<strong>false</strong>，其他的转化为<strong>true</strong></li>
<li><p><strong>Strings类型</strong>如果为空时转化为<strong>false</strong>,否则转化为<strong>true</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if ([0]) &#123;</div><div class="line">  // true    </div><div class="line">  // 因为数组是对象，对象会被转化为 true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用快捷方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">if (name !== &apos;&apos;) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">if (name) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">if (collection.length &gt; 0) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">if (collection.length) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>更多的信息 请看 Angus Croll 的 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">Truth Equality and JavaScript</a></p>
</li>
</ul>
<h2 id="块"><a href="#块" class="headerlink" title="块"></a><a href="#块" title="块"></a>块</h2><ul>
<li><p>给多行的块，使用大括号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">if (test)</div><div class="line">  return false;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">if (test) return false;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">if (test) &#123;</div><div class="line">  return false;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">function() &#123; return false; &#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">function() &#123;</div><div class="line">  return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a href="#注释" title="注释"></a>注释</h2><ul>
<li><p>使用 <code>/**...*/</code> 进行多行注释。注释要包括描述、指定类型、参数值和返回值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line"></div><div class="line">// make() returns a new element</div><div class="line">// based on the passed in tag name</div><div class="line">//</div><div class="line">// @param &lt;String&gt; tag</div><div class="line">// @return &lt;Element&gt; element</div><div class="line">function make(tag) &#123;</div><div class="line"></div><div class="line">  // ...stuff...</div><div class="line"></div><div class="line">  return element;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">/**</div><div class="line"> * make() returns a new element</div><div class="line"> * based on the passed in tag name</div><div class="line"> *</div><div class="line"> * @param &lt;String&gt; tag</div><div class="line"> * @return &lt;Element&gt; element</div><div class="line"> */</div><div class="line">function make(tag) &#123;</div><div class="line"></div><div class="line">  // ...stuff...</div><div class="line"></div><div class="line">  return element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>//</code> 进行单行注释。注释单独占一行，并写在需要注释对象的上面。在注释的上面留一个空行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">var active = true;  // is current tab</div><div class="line"></div><div class="line">// 推荐</div><div class="line">// is current tab</div><div class="line">var active = true;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">function getType() &#123;</div><div class="line">  console.log(&apos;fetching type...&apos;);</div><div class="line">  // set the default type to &apos;no type&apos;</div><div class="line">  var type = this._type || &apos;no type&apos;;</div><div class="line"></div><div class="line">  return type;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">function getType() &#123;</div><div class="line">  console.log(&apos;fetching type...&apos;);</div><div class="line"></div><div class="line">  // set the default type to &apos;no type&apos;</div><div class="line">  var type = this._type || &apos;no type&apos;;</div><div class="line"></div><div class="line">  return type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给你的代码加前缀，比如<code>FIXME</code>或<code>TODO</code>，这样有助于其他开发者可以迅速理解你指出的需要被处理的问题。<br>如果想更清晰一点你还可以在后面加上描述，比如: <code>FIXME -- need to figure this out</code>或<code>TODO -- need to implement.</code></p>
</li>
<li><p>使用 <code>// FIXME:</code> 去注释问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Calculator() &#123;</div><div class="line"></div><div class="line">  // FIXME: shouldn&apos;t use a global here</div><div class="line">  total = 0;</div><div class="line"></div><div class="line">  return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>// TODO:</code> 来注释解决方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Calculator() &#123;</div><div class="line"></div><div class="line">  // TODO: total should be configurable by an options param</div><div class="line">  this.total = 0;</div><div class="line"></div><div class="line">  return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a><a href="#空格" title="空格"></a>空格</h2><ul>
<li><p>将tab键设成2个空格</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 不推荐</div><div class="line">function() &#123;</div><div class="line">∙∙∙∙var name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">function() &#123;</div><div class="line">∙var name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">function() &#123;</div><div class="line">∙∙var name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>逗号/冒号/小括号后面留一个空格</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">function test()&#123;</div><div class="line">  console.log(&apos;test&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">function test() &#123;</div><div class="line">  console.log(&apos;test&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">dog.set(&apos;attr&apos;,&#123;</div><div class="line">  age: &apos;1 year&apos;,</div><div class="line">  breed: &apos;Bernese Mountain Dog&apos;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 推荐</div><div class="line">dog.set(&apos;attr&apos;, &#123;</div><div class="line">  age: &apos;1 year&apos;,</div><div class="line">  breed: &apos;Bernese Mountain Dog&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>在文件的最后留一个空行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">(function(global) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;)(this);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 推荐</div><div class="line">(function(global) &#123;</div><div class="line">  // ...stuff...</div><div class="line">&#125;)(this);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a><a href="#逗号" title="逗号"></a>逗号</h2><ul>
<li><p>逗号不要前置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// 不推荐</div><div class="line">var once</div><div class="line">  , upon</div><div class="line">  , aTime;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">var once,</div><div class="line">    upon,</div><div class="line">    aTime;</div><div class="line"></div><div class="line">// 不推荐</div><div class="line">var hero = &#123;</div><div class="line">    firstName: &apos;Bob&apos;</div><div class="line">  , lastName: &apos;Parr&apos;</div><div class="line">  , heroName: &apos;Mr. Incredible&apos;</div><div class="line">  , superPower: &apos;strength&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 推荐</div><div class="line">var hero = &#123;</div><div class="line">  firstName: &apos;Bob&apos;,</div><div class="line">  lastName: &apos;Parr&apos;,</div><div class="line">  heroName: &apos;Mr. Incredible&apos;,</div><div class="line">  superPower: &apos;strength&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>最后一个元素不可以加逗号。这在IE6和IE7还有IE9的怪异模式下出错。</p>
<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a><a href="#关于" title="关于"></a>关于</h2></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript编码规范指南&quot;&gt;&lt;a href=&quot;#JavaScript编码规范指南&quot; class=&quot;headerlink&quot; title=&quot;JavaScript编码规范指南&quot;&gt;&lt;/a&gt;JavaScript编码规范指南&lt;/h1&gt;&lt;p&gt;==============
    
    </summary>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ES6编程风格</title>
    <link href="http://yoursite.com/2017/02/12/ES6%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    <id>http://yoursite.com/2017/02/12/ES6编码风格/</id>
    <published>2017-02-12T08:12:11.000Z</published>
    <updated>2017-08-21T09:52:30.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6编程风格"><a href="#ES6编程风格" class="headerlink" title="ES6编程风格"></a>ES6编程风格</h1><h1 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a><a href="#编程风格" title="编程风格"></a>编程风格</h1><p>本章探讨如何将ES6的新语法，运用到编码实践之中，与传统的JavaScript语法结合在一起，写出合理的、易于阅读和维护的代码。</p>
<p>多家公司和组织已经公开了它们的风格规范，具体可参阅<a href="http://jscs.info/" target="_blank" rel="external">jscs.info</a>，下面的内容主要参考了<a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb</a>的JavaScript风格规范。</p>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a><a href="#块级作用域" title="块级作用域"></a>块级作用域</h2><p><strong>（1）let 取代 var</strong></p>
<p>ES6提出了两个新的声明变量的命令：<code>let</code>和<code>const</code>。其中，<code>let</code>完全可以取代<code>var</code>，因为两者语义相同，而且<code>let</code>没有副作用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">if (true) &#123;</div><div class="line">  let x = &apos;hello&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码如果用<code>var</code>替代<code>let</code>，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，<code>var</code>命令做不到这一点。</p>
<p><code>var</code>命令存在变量提升效用，<code>let</code>命令没有这个问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">if(true) &#123;</div><div class="line">  console.log(x); // ReferenceError</div><div class="line">  let x = &apos;hello&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码如果使用<code>var</code>替代<code>let</code>，<code>console.log</code>那一行就不会报错，而是会输出<code>undefined</code>，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p>
<p>所以，建议不再使用<code>var</code>命令，而是使用<code>let</code>命令取代。</p>
<p><strong>（2）全局常量和线程安全</strong></p>
<p>在<code>let</code>和<code>const</code>之间，建议优先使用<code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。</p>
<p><code>const</code>优于<code>let</code>有几个原因。一个是<code>const</code>可以提醒阅读程序的人，这个变量不应该改变；另一个是<code>const</code>比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对<code>const</code>进行优化，所以多使用<code>const</code>，有利于提供程序的运行效率，也就是说<code>let</code>和<code>const</code>的本质区别，其实是编译器内部的处理不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">var a = 1, b = 2, c = 3;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = 1;</div><div class="line">const b = 2;</div><div class="line">const c = 3;</div><div class="line"></div><div class="line">// best</div><div class="line">const [a, b, c] = [1, 2, 3];</div></pre></td></tr></table></figure>
<p><code>const</code>声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p>
<p>所有的函数都应该设置为常量。</p>
<p>长远来看，JavaScript可能会有多线程的实现（比如Intel的River Trail那一类的项目），这时<code>let</code>表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><a href="#字符串" title="字符串"></a>字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &quot;foobar&quot;;</div><div class="line">const b = &apos;foo&apos; + a + &apos;bar&apos;;</div><div class="line"></div><div class="line">// acceptable</div><div class="line">const c = `foobar`;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &apos;foobar&apos;;</div><div class="line">const b = `foo$&#123;a&#125;bar`;</div><div class="line">const c = &apos;foobar&apos;;</div></pre></td></tr></table></figure>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a><a href="#解构赋值" title="解构赋值"></a>解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const arr = [1, 2, 3, 4];</div><div class="line"></div><div class="line">// bad</div><div class="line">const first = arr[0];</div><div class="line">const second = arr[1];</div><div class="line"></div><div class="line">// good</div><div class="line">const [first, second] = arr;</div></pre></td></tr></table></figure>
<p>函数的参数如果是对象的成员，优先使用解构赋值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function getFullName(user) &#123;</div><div class="line">  const firstName = user.firstName;</div><div class="line">  const lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function getFullName(obj) &#123;</div><div class="line">  const &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// best</div><div class="line">function getFullName(&#123; firstName, lastName &#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function processInput(input) &#123;</div><div class="line">  return [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function processInput(input) &#123;</div><div class="line">  return &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a href="#对象" title="对象"></a>对象</h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &#123; k1: v1, k2: v2, &#125;;</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; k1: v1, k2: v2 &#125;;</div><div class="line">const b = &#123;</div><div class="line">  k1: v1,</div><div class="line">  k2: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用<code>Object.assign</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const a = &#123;&#125;;</div><div class="line">a.x = 3;</div><div class="line"></div><div class="line">// if reshape unavoidable</div><div class="line">const a = &#123;&#125;;</div><div class="line">Object.assign(a, &#123; x: 3 &#125;);</div><div class="line"></div><div class="line">// good</div><div class="line">const a = &#123; x: null &#125;;</div><div class="line">a.x = 3;</div></pre></td></tr></table></figure>
<p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">&#125;;</div><div class="line">obj[getKey(&apos;enabled&apos;)] = true;</div><div class="line"></div><div class="line">// good</div><div class="line">const obj = &#123;</div><div class="line">  id: 5,</div><div class="line">  name: &apos;San Francisco&apos;,</div><div class="line">  [getKey(&apos;enabled&apos;)]: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码中，对象<code>obj</code>的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建<code>obj</code>的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p>
<p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var ref = &apos;some value&apos;;</div><div class="line"></div><div class="line">// bad</div><div class="line">const atom = &#123;</div><div class="line">  ref: ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue: function (value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// good</div><div class="line">const atom = &#123;</div><div class="line">  ref,</div><div class="line"></div><div class="line">  value: 1,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    return atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a href="#数组" title="数组"></a>数组</h2><p>使用扩展运算符（…）拷贝数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const len = items.length;</div><div class="line">const itemsCopy = [];</div><div class="line">let i;</div><div class="line"></div><div class="line">for (i = 0; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">const itemsCopy = [...items];</div></pre></td></tr></table></figure>
<p>使用Array.from方法，将类似数组的对象转为数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const foo = document.querySelectorAll(&apos;.foo&apos;);</div><div class="line">const nodes = Array.from(foo);</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a href="#函数" title="函数"></a>函数</h2><p>立即执行函数可以写成箭头函数的形式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(() =&gt; &#123;</div><div class="line">  console.log(&apos;Welcome to the Internet.&apos;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">[1, 2, 3].map(function (x) &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// good</div><div class="line">[1, 2, 3].map((x) =&gt; &#123;</div><div class="line">  return x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// best</div><div class="line">[1, 2, 3].map(x =&gt; x * x);</div></pre></td></tr></table></figure>
<p>箭头函数取代<code>Function.prototype.bind</code>，不应再用self/_this/that绑定 this。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const self = this;</div><div class="line">const boundMethod = function(...params) &#123;</div><div class="line">  return method.apply(self, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// acceptable</div><div class="line">const boundMethod = method.bind(this);</div><div class="line"></div><div class="line">// best</div><div class="line">const boundMethod = (...params) =&gt; method.apply(this, params);</div></pre></td></tr></table></figure>
<p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p>
<p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function divide(a, b, option = false ) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function divide(a, b, &#123; option = false &#125; = &#123;&#125;) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function concatenateAll() &#123;</div><div class="line">  const args = Array.prototype.slice.call(arguments);</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function concatenateAll(...args) &#123;</div><div class="line">  return args.join(&apos;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用默认值语法设置函数参数的默认值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function handleThings(opts) &#123;</div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">function handleThings(opts = &#123;&#125;) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Map结构"><a href="#Map结构" class="headerlink" title="Map结构"></a><a href="#Map结构" title="Map结构"></a>Map结构</h2><p>注意区分Object和Map，只有模拟现实世界的实体对象时，才使用Object。如果只是需要<code>key: value</code>的数据结构，使用Map结构。因为Map有内建的遍历机制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">let map = new Map(arr);</div><div class="line"></div><div class="line">for (let key of map.keys()) &#123;</div><div class="line">  console.log(key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let value of map.values()) &#123;</div><div class="line">  console.log(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (let item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a><a href="#Class" title="Class"></a>Class</h2><p>总是用Class，取代需要prototype的操作。因为Class的写法更简洁，更易于理解。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">function Queue(contents = []) &#123;</div><div class="line">  this._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = function() &#123;</div><div class="line">  const value = this._queue[0];</div><div class="line">  this._queue.splice(0, 1);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class Queue &#123;</div><div class="line">  constructor(contents = []) &#123;</div><div class="line">    this._queue = [...contents];</div><div class="line">  &#125;</div><div class="line">  pop() &#123;</div><div class="line">    const value = this._queue[0];</div><div class="line">    this._queue.splice(0, 1);</div><div class="line">    return value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>extends</code>实现继承，因为这样更简单，不会有破坏<code>instanceof</code>运算的危险。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const inherits = require(&apos;inherits&apos;);</div><div class="line">function PeekableQueue(contents) &#123;</div><div class="line">  Queue.apply(this, contents);</div><div class="line">&#125;</div><div class="line">inherits(PeekableQueue, Queue);</div><div class="line">PeekableQueue.prototype.peek = function() &#123;</div><div class="line">  return this._queue[0];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class PeekableQueue extends Queue &#123;</div><div class="line">  peek() &#123;</div><div class="line">    return this._queue[0];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a href="#模块" title="模块"></a>模块</h2><p>首先，Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用<code>import</code>取代<code>require</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const moduleA = require(&apos;moduleA&apos;);</div><div class="line">const func1 = moduleA.func1;</div><div class="line">const func2 = moduleA.func2;</div><div class="line"></div><div class="line">// good</div><div class="line">import &#123; func1, func2 &#125; from &apos;moduleA&apos;;</div></pre></td></tr></table></figure>
<p>使用<code>export</code>取代<code>module.exports</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// commonJS的写法</div><div class="line">var React = require(&apos;react&apos;);</div><div class="line"></div><div class="line">var Breadcrumbs = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = Breadcrumbs;</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line">import React from &apos;react&apos;;</div><div class="line"></div><div class="line">const Breadcrumbs = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;nav /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default Breadcrumbs</div></pre></td></tr></table></figure>
<p>如果模块只有一个输出值，就使用<code>export default</code>，如果模块有多个输出值，就不使用<code>export default</code>，不要<code>export default</code>与普通的<code>export</code>同时使用。</p>
<p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">import * as myObject &apos;./importModule&apos;;</div><div class="line"></div><div class="line">// good</div><div class="line">import myObject from &apos;./importModule&apos;;</div></pre></td></tr></table></figure>
<p>如果模块默认输出一个函数，函数名的首字母应该小写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function makeStyleGuide() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default makeStyleGuide;</div></pre></td></tr></table></figure>
<p>如果模块默认输出一个对象，对象名的首字母应该大写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const StyleGuide = &#123;</div><div class="line">  es6: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default StyleGuide;</div></pre></td></tr></table></figure>
<h2 id="ESLint的使用"><a href="#ESLint的使用" class="headerlink" title="ESLint的使用"></a><a href="#ESLint的使用" title="ESLint的使用"></a>ESLint的使用</h2><p>ESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p>
<p>首先，安装ESLint。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint</div></pre></td></tr></table></figure>
<p>然后，安装Airbnb语法规则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g eslint-config-airbnb</div></pre></td></tr></table></figure>
<p>最后，在项目的根目录下新建一个<code>.eslintrc</code>文件，配置ESLint。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;extends&quot;: &quot;eslint-config-airbnb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在就可以检查，当前项目的代码是否符合预设的规则。</p>
<p><code>index.js</code>文件的代码如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var unusued = &apos;I have no purpose!&apos;;</div><div class="line"></div><div class="line">function greet() &#123;</div><div class="line">    var message = &apos;Hello, World!&apos;;</div><div class="line">    alert(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line">greet();</div></pre></td></tr></table></figure>
<p>使用ESLint检查这个文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ eslint index.js</div><div class="line">index.js</div><div class="line">  1:5  error  unusued is defined but never used                 no-unused-vars</div><div class="line">  4:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line">  5:5  error  Expected indentation of 2 characters but found 4  indent</div><div class="line"></div><div class="line">✖ 3 problems (3 errors, 0 warnings)</div></pre></td></tr></table></figure>
<p>上面代码说明，原文件有三个错误，一个是定义了变量，却没有使用，另外两个是行首缩进为4个空格，而不是规定的2个空格。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ES6编程风格&quot;&gt;&lt;a href=&quot;#ES6编程风格&quot; class=&quot;headerlink&quot; title=&quot;ES6编程风格&quot;&gt;&lt;/a&gt;ES6编程风格&lt;/h1&gt;&lt;h1 id=&quot;编程风格&quot;&gt;&lt;a href=&quot;#编程风格&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现继承</title>
    <link href="http://yoursite.com/2017/02/12/js%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2017/02/12/js实现继承/</id>
    <published>2017-02-12T08:12:11.000Z</published>
    <updated>2017-08-21T10:01:17.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript中实现继承的几种方法"><a href="#JavaScript中实现继承的几种方法" class="headerlink" title="JavaScript中实现继承的几种方法"></a><a href="#JavaScript中实现继承的几种方法" title="JavaScript中实现继承的几种方法"></a>JavaScript中实现继承的几种方法</h1><h2 id="ES5中的实现"><a href="#ES5中的实现" class="headerlink" title="ES5中的实现"></a><a href="#ES5中的实现" title="ES5中的实现"></a>ES5中的实现</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h3><p>JavaScript(ES5)中没有像Java那样类的概念，写法跟传统的面向对象语言（比如C++和Java）差异很大，很容易让新学习这门语言的程序员感到困惑。但是我们可以通过原型链prototype来模拟类，去实现继承的相关功能。下面来看看ES5中实现继承常见的三种方法。代码如下：</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="#代码" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * JavaScript(ES5)中实现继承的几种方法</div><div class="line"> */</div><div class="line"></div><div class="line">// 定义基类Person</div><div class="line">function Person(name, age) &#123;</div><div class="line">  this.name = name;</div><div class="line">  this.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 共享数据</div><div class="line">Person.prototype.LEGS_NUM = 2;</div><div class="line"></div><div class="line">// 共享方法</div><div class="line">Person.prototype.info = function () &#123;</div><div class="line">  console.log(&apos;My name is &apos; + this.name + &apos; .I\&apos;m &apos; + this.age + &apos; years old now&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.walk = function () &#123;</div><div class="line">  console.log(this.name + &apos; is walking...&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// Student子类</div><div class="line">function Student(name, age, className) &#123;</div><div class="line">  // 调用父类</div><div class="line">  Person.call(this, name, age);</div><div class="line">  this.className = className;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 1⃣️ 方法一：Person.prototype直接赋值给Student.prototype</div><div class="line">// Student.prototype = Person.prototype;</div><div class="line"></div><div class="line">// 2⃣️ 方法二：Student.prototype为Person的实例</div><div class="line">// Student.prototype = new Person();</div><div class="line"></div><div class="line">// 3⃣️ 方法三：创建一个空对象，对象的原型指向Person.prototype，赋值给Student.prototype</div><div class="line">Student.prototype = Object.create(Person.prototype);</div><div class="line"></div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line">// 覆盖父类的info方法</div><div class="line">Student.prototype.info = function () &#123;</div><div class="line">  console.log(&apos;My name is &apos; + this.name + &apos;,I\&apos;m &apos; + this.age + &apos; years old now, and from class &apos; + this.className + &apos;.&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// Student类的共享方法</div><div class="line">Student.prototype.learn = function (subject) &#123;</div><div class="line">  console.log(this.name + &apos; is learning &apos; + subject + &apos;.&apos;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 测试,创建一个Student的实例</div><div class="line">var microzz = new Student(&apos;Microzz&apos;, 22, 5);</div><div class="line">microzz.info(); // My name is Microzz,I&apos;m 22 years old now, and from class 5.</div><div class="line">console.log(microzz.LEGS_NUM); // 2</div><div class="line">microzz.walk(); // Microzz is walking...</div><div class="line">microzz.learn(&apos;JavaScript&apos;); // Microzz is learning JavaScript.</div><div class="line">console.log(microzz.__proto__.__proto__ === Person.prototype); // true</div><div class="line">console.log(microzz.__proto__ === Student.prototype); // true</div><div class="line">console.log(microzz.__proto__.constructor === Student); // true</div></pre></td></tr></table></figure>
<h3 id="三种方法比较"><a href="#三种方法比较" class="headerlink" title="三种方法比较"></a><a href="#三种方法比较" title="三种方法比较"></a>三种方法比较</h3><p>上面代码中有三种方法实现继承，现在我们可以来分析一下这几种方法。<br>1⃣️这种方法中，Person.prototype直接赋值给Student.prototype，但是有一个很严重的问题，如果子类prototype添加新的东西的话也会改写父类。所以这种方法不推荐。<br>2⃣️第二种方法Student.prototype为Person的实例，这也是可以实现的。但是Person构造函数有参数应该传什么呢？传任何一个都是很奇怪的。所以也不推荐。<br>3⃣️第三种方法是比较理想的，创建一个空对象，对象的原型指向Person.prototype，赋值给Student.prototype。但是Object.create也有一点小瑕疵，因为它是ES5之后才支持的，不过我们可以通过模拟实现Object.create方法。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (!Object.create) &#123;</div><div class="line">  Object.prototype.create = function (proto) &#123;</div><div class="line">    function F() &#123;&#125;</div><div class="line">    F.prototype = proto;</div><div class="line">    return new F;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在ES5中就完美实现了继承😄</p>
<h2 id="ES6中的实现"><a href="#ES6中的实现" class="headerlink" title="ES6中的实现"></a><a href="#ES6中的实现" title="ES6中的实现"></a>ES6中的实现</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a><a href="#概述-1" title="概述"></a>概述</h3><p>ES6提供了更接近传统语言”类”的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。下面我们用ES6的语法实现类的继承。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><a href="#代码-1" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">// 基类 Person</div><div class="line">class Person &#123;</div><div class="line">  // 父类的构造方法</div><div class="line">  constructor(name, age) &#123;</div><div class="line">    this.name = name;</div><div class="line">    this.age = age;</div><div class="line">    // 共享变量</div><div class="line">    this.LEGS_NUM = 2;</div><div class="line">  &#125;</div><div class="line">  // 父类的info方法</div><div class="line">  info() &#123;</div><div class="line">    console.log(`My name is $&#123;this.name&#125;, I\&apos;m $&#123;this.age&#125; years old now.`);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 父类的walk方法</div><div class="line">  walk() &#123;</div><div class="line">    console.log(this.name + &apos; is walking...&apos;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 子类 Student</div><div class="line">class Student extends Person &#123;</div><div class="line">  constructor(name, age, className) &#123;</div><div class="line">    // 调用基类的构造方法</div><div class="line">    super(name, age);</div><div class="line">    this.className = className;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // 覆盖父类的info方法</div><div class="line">  info() &#123;</div><div class="line">    console.log(`My name is $&#123;this.name&#125;, I\&apos;m $&#123;this.age&#125; years old, and from class $&#123;this.className&#125;.`);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 实例化一个Student的实例</div><div class="line">let stu = new Student(&apos;Zhaohui&apos;, 22, 5);</div><div class="line">stu.info(); // My name is Zhaohui, I&apos;m 22 years old, and from class 5.</div><div class="line">stu.walk(); // Zhaohui is walking...</div><div class="line">console.log(stu.LEGS_NUM); // 2</div><div class="line">console.log(stu instanceof Student); // true</div><div class="line">console.log(stu instanceof Person); // true</div></pre></td></tr></table></figure>
<p>这样我们就通过ES6中的class实现了“类”的继承了😄</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript中实现继承的几种方法&quot;&gt;&lt;a href=&quot;#JavaScript中实现继承的几种方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中实现继承的几种方法&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#JavaScript中实现继承的
    
    </summary>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>SASS用法指南</title>
    <link href="http://yoursite.com/2017/02/10/SASS%E7%94%A8%E6%B3%95%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/02/10/SASS用法指南/</id>
    <published>2017-02-10T03:42:31.000Z</published>
    <updated>2017-08-21T09:45:25.544Z</updated>
    
    <content type="html"><![CDATA[<p>SASS用法指南</p>
<blockquote>
<p>学过CSS的人都知道，它不是一种编程语言。<br>你可以用它开发网页样式，但是没法用它编程。也就是说，CSS基本上是设计师的工具，不是程序员的工具。在程序员眼里，CSS是一件很麻烦的东西。它没有变量，也没有条件语句，只是一行行单纯的描述，写起来相当费事。<br>很自然地，有人就开始为CSS加入编程元素，这被叫做”CSS预处理器”（css preprocessor）。它的基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件。<br>各种”CSS预处理器”之中，我自己最喜欢SASS，觉得它有很多优点，打算以后都用它来写CSS。下面是我整理的用法总结，供自己开发时参考，相信对其他人也有用。</p>
</blockquote>
<h1 id="什么是SASS"><a href="#什么是SASS" class="headerlink" title="什么是SASS"></a>什么是SASS</h1><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。<br>本文总结了SASS的主要用法。我的目标是，有了这篇文章，日常的一般使用就不需要去看官方文档了。</p>
<h1 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。<br>假定你已经安装好了Ruby，接着在命令行输入下面的命令：<br>　　gem install sass<br>然后，就可以使用了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>SASS文件就是普通的文本文件，里面可以直接使用CSS语法。文件后缀名是.scss，意思为Sassy CSS。<br>下面的命令，可以在屏幕上显示.scss文件转化的css代码。（假设文件名为test。）<br>　　sass test.scss<br>如果要将显示结果保存成文件，后面再跟一个.css文件名。<br>　　sass test.scss test.css<br>SASS提供四个编译风格的选项：<br>　　 nested：嵌套缩进的css代码，它是默认值。 　　 expanded：没有缩进的、扩展的css代码。<br>　　 compact：简洁格式的css代码。 　　 compressed：压缩后的css代码。<br>生产环境当中，一般使用最后一个选项。<br>　　sass –style compressed test.sass test.css<br>你也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。</p>
<p>　　// watch a file<br>　　sass –watch input.scss:output.css<br>　　<br>　　// watch a directory<br>　　sass –watch app/sass:public/stylesheets<br>　　<br>SASS的官方网站，提供了一个在线转换器。你可以在那里，试运行下面的各种例子。</p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>SASS允许使用变量，所有变量以$开头。</p>
<p>　　$blue : #1875e7;　<br>　　div {<br>　　　color : $blue;<br>　　}<br>　　<br>如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。</p>
<p>　　$side : left;<br>　　.rounded {<br>　　　　border-#{$side}-radius: 5px;<br>　　}</p>
<h2 id="计算功能"><a href="#计算功能" class="headerlink" title="计算功能"></a>计算功能</h2><p>SASS允许在代码中使用算式：</p>
<p>　　body {<br>　　　　margin: (14px/2);<br>　　　　top: 50px + 100px;<br>　　　　right: $var * 10%;<br>　　}</p>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>SASS允许选择器嵌套。比如，下面的CSS代码：</p>
<p>　　div h1 {<br>　　　　color : red;<br>　　}<br>可以写成：</p>
<p>　　div {<br>　　　　hi {<br>　　　　　　color:red;<br>　　　　}<br>　　}<br>属性也可以嵌套，比如border-color属性，可以写成：</p>
<p>　　p {<br>　　　　border: {<br>　　　　　　color: red;<br>　　　　}<br>　　}<br>注意，border后面必须加上冒号。<br>在嵌套的代码块内，可以使用&amp;引用父元素。比如a:hover伪类，可以写成：</p>
<p>　　a {<br>　　　　&amp;:hover { color: #ffb3ff; }<br>　　}</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>SASS共有两种注释风格。<br>标准的CSS注释 /<em> comment </em>/，会保留到编译后的文件。<br>单行注释 // comment，只保留在SASS源文件中，编译后被省略。<br>在/*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。</p>
<p>　　/<em>!<br>　　　　重要注释！
　　</em>/</p>
<h1 id="代码的重用"><a href="#代码的重用" class="headerlink" title="代码的重用"></a>代码的重用</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>SASS允许一个选择器，继承另一个选择器。比如，现有class1：</p>
<p>　　.class1 {<br>　　　　border: 1px solid #ddd;<br>　　}<br>class2要继承class1，就要使用@extend命令：</p>
<p>　　.class2 {<br>　　　　@extend .class1;<br>　　　　font-size:120%;<br>　　}</p>
<h2 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h2><p>Mixin有点像C语言的宏（macro），是可以重用的代码块。<br>使用@mixin命令，定义一个代码块。</p>
<p>　　@mixin left {<br>　　　　float: left;<br>　　　　margin-left: 10px;<br>　　}<br>使用@include命令，调用这个mixin。</p>
<p>　　div {<br>　　　　@include left;<br>　　}<br>mixin的强大之处，在于可以指定参数和缺省值。</p>
<p>　　@mixin left($value: 10px) {<br>　　　　float: left;<br>　　　　margin-right: $value;<br>　　}<br>使用的时候，根据需要加入参数：</p>
<p>　　div {<br>　　　　@include left(20px);<br>　　}<br>下面是一个mixin的实例，用来生成浏览器前缀。</p>
<p>　　@mixin rounded($vert, $horz, $radius: 10px) {<br>　　　　border-#{$vert}-#{$horz}-radius: $radius;<br>　　　　-moz-border-radius-#{$vert}#{$horz}: $radius;<br>　　　　-webkit-border-#{$vert}-#{$horz}-radius: $radius;<br>　　}<br>使用的时候，可以像下面这样调用：</p>
<p>　　#navbar li { @include rounded(top, left); }<br>　　#footer { @include rounded(top, left, 5px); }</p>
<h2 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h2><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。</p>
<p>　　lighten(#cc3, 10%) // #d6d65c<br>　　darken(#cc3, 10%) // #a3a329<br>　　grayscale(#cc3) // #808080<br>　　complement(#cc3) // #33c</p>
<h2 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h2><p>@import命令，用来插入外部文件。<br>　　@import “path/filename.scss”;<br>如果插入的是.css文件，则等同于css的import命令。<br>　　@import “foo.css”; 　　</p>
<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>@if可以用来判断：</p>
<p>　　p {<br>　　　　@if 1 + 1 == 2 { border: 1px solid; }<br>　　　　@if 5 &lt; 3 { border: 2px dotted; }<br>　　}<br>配套的还有@else命令：</p>
<p>　　@if lightness($color) &gt; 30% {<br>　　　　background-color: #000;<br>　　} @else {<br>　　　　background-color: #fff;<br>　　}</p>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>SASS支持for循环：</p>
<p>　　@for $i from 1 to 10 {<br>　　　　.border-#{$i} {<br>　　　　　　border: #{$i}px solid blue;<br>　　　　}<br>　　}<br>也支持while循环：</p>
<p>　　$i: 6;<br>　　@while $i &gt; 0 {<br>　　　　.item-#{$i} { width: 2em * $i; }<br>　　　　$i: $i - 2;<br>　　}<br>each命令，作用与for类似：</p>
<p>　　@each $member in a, b, c, d {<br>　　　　.#{$member} {<br>　　　　　　background-image: url(“/image/#{$member}.jpg”);<br>　　　　}<br>　　}</p>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>SASS允许用户编写自己的函数。</p>
<p>　　@function double($n) {<br>　　　　@return $n * 2;<br>　　}<br>　　#sidebar {<br>　　　　width: double(5px);<br>　　}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SASS用法指南&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学过CSS的人都知道，它不是一种编程语言。&lt;br&gt;你可以用它开发网页样式，但是没法用它编程。也就是说，CSS基本上是设计师的工具，不是程序员的工具。在程序员眼里，CSS是一件很麻烦的东西。它没有变量，也没有条件语句，
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="sass" scheme="http://yoursite.com/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>浏览器兼容性问题</title>
    <link href="http://yoursite.com/2016/12/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/12/18/浏览器兼容性问题/</id>
    <published>2016-12-18T11:12:11.000Z</published>
    <updated>2017-09-01T03:33:57.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器兼容性问题"><a href="#浏览器兼容性问题" class="headerlink" title="浏览器兼容性问题"></a>浏览器兼容性问题</h1><blockquote>
<p>所谓的浏览器兼容性问题，是指因为不同的浏览器对同一段代码有不同的解析，造成页面显示效果不统一的情况。在大多数情况下，我们的需求是，无论用户用什么浏览器来查看我们的网站或者登陆我们的系统，都应该是统一的显示效果。所以浏览器的兼容性问题是[前端开发]人员经常会碰到和必须要解决的问题。</p>
</blockquote>
<p>在学习浏览器兼容性之前，我想把前端开发人员划分为两类：</p>
<p>第一类是精确按照设计图开发的前端开发人员，可以说是精确到1px的，他们很容易就会发现设计图的不足，并且在很少的情况下会碰到浏览器的兼容性问题，而这些问题往往都死浏览器的bug，并且他们制作的页面后期易维护，代码重用问题少，可以说是比较牢固放心的代码。</p>
<p>第二类是基本按照设计图来开发的前端开发人员，很多细枝末节差距很大，不如间距，行高，图片位置等等经常会差几px。某种效果的实现也是反复调试得到，具体为什么出现这种效果还模模糊糊，整体布局十分脆弱。稍有改动就乱七八糟。代码为什么这么写还不知所以然。这类开发人员往往经常为兼容性问题所困。修改好了这个浏览器又乱了另一个浏览器。改来改去也毫无头绪。其实他们碰到的兼容性问题大部分不应该归咎于浏览器，而是他们的技术本身了。</p>
<p>文章主要针对的是第一类，严谨型的开发人员，因此这里主要从浏览器解析差异的角度来分析兼容性问题。（相关文章推荐：<a href="http://caniuse.com/" target="_blank" rel="external"><span style="color:#0000ff">主流浏览器CSS 3和HTML 5兼容查询</span></a></p>
<h2 id="问题一：不同浏览器的标签默认的外补丁和内补丁不同"><a href="#问题一：不同浏览器的标签默认的外补丁和内补丁不同" class="headerlink" title="问题一：不同浏览器的标签默认的外补丁和内补丁不同"></a>问题一：不同浏览器的标签默认的外补丁和内补丁不同</h2><p>问题症状：随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。</p>
<p>碰到频率:100%</p>
<p>解决方案：CSS里    *{margin:0;padding:0;}</p>
<p>备注：这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的CSS文件开头都会用通配符*来设置各个标签的内外补丁是0。</p>
<h2 id="问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"><a href="#问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大" class="headerlink" title="问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"></a>问题二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大</h2><p>问题症状:常见症状是IE6中后面的一块被顶到下一行</p>
<p>碰到频率：90%（稍微复杂点的页面都会碰到，float布局最常见的浏览器兼容问题）</p>
<p>解决方案：在float的标签样式控制中加入 display:inline;将其转化为行内属性</p>
<p>备注：我们最常用的就是div+CSS布局了，而div就是一个典型的块属性标签，横向布局的时候我们通常都是用div float实现的，横向的间距设置如果用margin实现，这就是一个必然会碰到的兼容性问题。</p>
<h2 id="问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"><a href="#问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度" class="headerlink" title="问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"></a>问题三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度</h2><p>问题症状：IE6、7和遨游里这个标签的高度不受控制，超出自己设置的高度</p>
<p>碰到频率：60%</p>
<p>解决方案：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。</p>
<p>备注：这种情况一般出现在我们设置小圆角背景的标签里。出现这个问题的原因是IE8之前的浏览器都会给标签一个最小默认的行高的高度。即使你的标签是空的，这个标签的高度还是会达到默认的行高。</p>
<h2 id="问题四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug"><a href="#问题四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug" class="headerlink" title="问题四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug"></a>问题四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug</h2><p>问题症状：IE6里的间距比超过设置的间距</p>
<p>碰到几率：20%</p>
<p>解决方案：在display:block;后面加入display:inline;display:table;</p>
<p>备注：行内属性标签，为了设置宽高，我们需要设置display:block;(除了input标签比较特殊)。在用float布局并有横向的margin后，在IE6下，他就具有了块属性float后的横向margin的bug。不过因为它本身就是行内属性标签，所以我们再加上display:inline的话，它的高宽就不可设了。这时候我们还需要在display:inline后面加入display:talbe。</p>
<h2 id="问题五：图片默认有间距"><a href="#问题五：图片默认有间距" class="headerlink" title="问题五：图片默认有间距"></a>问题五：图片默认有间距</h2><p>问题症状：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。</p>
<p>碰到几率：20%</p>
<p>解决方案：使用float属性为img布局</p>
<p>备注：因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。（我的一个学生使用负margin，虽然能解决，但负margin本身就是容易引起浏览器兼容问题的用法，所以我禁止他们使用）</p>
<h2 id="问题六：标签最低高度设置min-height不兼容"><a href="#问题六：标签最低高度设置min-height不兼容" class="headerlink" title="问题六：标签最低高度设置min-height不兼容"></a>问题六：标签最低高度设置min-height不兼容</h2><p>问题症状：因为min-height本身就是一个不兼容的CSS属性，所以设置min-height时不能很好的被各个浏览器兼容</p>
<p>碰到几率：5%</p>
<p>解决方案：如果我们要设置一个标签的最小高度200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;}</p>
<p>备注：在B/S系统前端开时，有很多情况下我们又这种需求。当内容小于一个值（如300px）时。容器的高度为300px；当内容高度大于这个值时，容器高度被撑高，而不是出现滚动条。这时候我们就会面临这个兼容性问题。</p>
<h2 id="问题七：透明度的兼容CSS设置"><a href="#问题七：透明度的兼容CSS设置" class="headerlink" title="问题七：透明度的兼容CSS设置"></a>问题七：透明度的兼容CSS设置</h2><p>做兼容页面的方法是：每写一小段代码（布局中的一行或者一块）我们都要在不同的浏览器中看是否兼容，当然熟练到一定的程度就没这么麻烦了。建议经常会碰到兼容性问题的新手使用。很多兼容性问题都是因为浏览器对标签的默认属性解析不同造成的，只要我们稍加设置都能轻松地解决这些兼容问题。如果我们熟悉标签的默认属性的话，就能很好的理解为什么会出现兼容问题以及怎么去解决这些兼容问题。</p>
<pre>

1.  /* CSS hack*/ 

</pre>

<p>我很少使用hacker的，可能是个人习惯吧，我不喜欢写的代码IE不兼容，然后用hack来解决。不过hacker还是非常好用的。使用hacker我可以把浏览器分为3类：IE6 ；IE7和遨游；其他（IE8 chrome ff safari opera等）</p>
<p>◆IE6认识的hacker 是下划线_ 和星号 *</p>
<p>◆IE7 遨游认识的hacker是星号 *</p>
<p>比如这样一个CSS设置：</p>
<pre>

1.  height:300px;*height:200px;_height:100px; 

</pre>

<p>IE6浏览器在读到height:300px的时候会认为高时300px；继续往下读，他也认识<em>heihgt， 所以当IE6读到</em>height:200px的时候会覆盖掉前一条的相冲突设置，认为高度是200px。继续往下读，IE6还认识_height,所以他又会覆盖掉200px高的设置，把高度设置为100px；</p>
<p>IE7和遨游也是一样的从高度300px的设置往下读。当它们读到*height200px的时候就停下了，因为它们不认识_height。所以它们会把高度解析为200px，剩下的浏览器只认识第一个height:300px;所以他们会把高度解析为300px。因为优先级相同且想冲突的属性设置后一个会覆盖掉前一个，所以书写的次序是很重要的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器兼容性问题&quot;&gt;&lt;a href=&quot;#浏览器兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;浏览器兼容性问题&quot;&gt;&lt;/a&gt;浏览器兼容性问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;所谓的浏览器兼容性问题，是指因为不同的浏览器对同一段代码有不同的解
    
    </summary>
    
    
      <category term="编码" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>vim入坑指南</title>
    <link href="http://yoursite.com/2016/12/14/vim%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/12/14/vim入坑指南/</id>
    <published>2016-12-14T02:04:38.000Z</published>
    <updated>2017-08-16T05:03:38.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim入坑指南"><a href="#vim入坑指南" class="headerlink" title="vim入坑指南"></a>vim入坑指南</h1><h2 id="什么是VIM"><a href="#什么是VIM" class="headerlink" title="什么是VIM"></a>什么是VIM</h2><p>Vim是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用，和Emacs并列成为类Unix系统用户最喜欢的文本编辑器。</p>
<h2 id="vim的设计理念"><a href="#vim的设计理念" class="headerlink" title="vim的设计理念"></a>vim的设计理念</h2><h3 id="命令组合"><a href="#命令组合" class="headerlink" title="命令组合:"></a>命令组合:</h3><p>Vim强大的编辑能力中很大部分是来自于其普通模式命令。vim的设计理念是命令的组合。例如普通模式命令”dd”删除当前行，”dj”代表删除到下一行,原理是第一个”d”含义是删除,”j”键代表移动到下一行,组合后”dj”删除当前行和下一行。另外还可以指定命令重复次数，”2dd”（重复”dd”两次），和”dj”的效果是一样的。”d^”,”^”代表行首,故组合后含义是删除到光标开始到行首间的内容(不包含光标);”d$” $”代表行尾,删除到行尾的内容(包含光标);用户学习了各种各样的文本间移动/跳转的命令和其他的普通模式的编辑命令，并且能够灵活组合使用的话，能够比那些没有模式的编辑器更加高效的进行文本编辑。</p>
<h3 id="模式间的组合"><a href="#模式间的组合" class="headerlink" title="模式间的组合:"></a>模式间的组合:</h3><p>在普通模式中，有很多方法可以进入插入模式。比较普通的方式是按”a”（append/追加）键或者”i”（insert/插入）键。</p>
<h2 id="Vim三种模式"><a href="#Vim三种模式" class="headerlink" title="Vim三种模式"></a>Vim三种模式</h2><h3 id="插入模式：即-insert-模式，用来输入文本；"><a href="#插入模式：即-insert-模式，用来输入文本；" class="headerlink" title="插入模式：即 insert 模式，用来输入文本；"></a>插入模式：即 insert 模式，用来输入文本；</h3><h3 id="编辑模式：用以执行命令，也称为正常模式，也是进入Vim的缺省模式；"><a href="#编辑模式：用以执行命令，也称为正常模式，也是进入Vim的缺省模式；" class="headerlink" title="编辑模式：用以执行命令，也称为正常模式，也是进入Vim的缺省模式；"></a>编辑模式：用以执行命令，也称为正常模式，也是进入Vim的缺省模式；</h3><h3 id="命令模式：用来执行冒号命令。"><a href="#命令模式：用来执行冒号命令。" class="headerlink" title="命令模式：用来执行冒号命令。"></a>命令模式：用来执行冒号命令。</h3><p>进入Vim后会直接进入编辑模式，接下来按下i进入插入模式，可以输入字符，按下<esc>键将从插入模式转换到编辑模式，该模式用于移动和操纵文本。在编辑模式下输入:即可进入命令模式，可以进行保存、查找、替换、配置Vim操作等。</esc></p>
<h2 id="按键功能"><a href="#按键功能" class="headerlink" title="按键功能"></a>按键功能</h2><p>在Vim的编辑模式下，一些常用的按键都变成了功能键，并且与大家在Windows下常用的快捷键完全不同，在这里，总结一些初学Vim所用的按键功能：</p>
<table>
<thead>
<tr>
<th>按键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>h或←</td>
<td style="text-align:center">光标左移</td>
</tr>
<tr>
<td>l或→</td>
<td style="text-align:center">光标右移</td>
</tr>
<tr>
<td>k或↑</td>
<td style="text-align:center">光标上移</td>
</tr>
<tr>
<td>j或↓</td>
<td style="text-align:center">光标下移</td>
</tr>
<tr>
<td>gg</td>
<td style="text-align:center">快速定位到文本开头</td>
</tr>
<tr>
<td>G（shift+g）</td>
<td style="text-align:center">快速定位到文本最后一段</td>
</tr>
<tr>
<td>0或home</td>
<td style="text-align:center">快速定位到当前段首</td>
</tr>
<tr>
<td>$或end</td>
<td style="text-align:center">快速定位到当前段首</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td style="text-align:center">向下翻一页</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td style="text-align:center">向上翻一页</td>
</tr>
<tr>
<td>Ctrl+d</td>
<td style="text-align:center">向下翻半页</td>
</tr>
<tr>
<td>Ctrl+u</td>
<td style="text-align:center">向上翻一页</td>
</tr>
<tr>
<td>/string</td>
<td style="text-align:center">查找文本中光标位置下方的string字符串，如要查找kabc则直接输入/kabc即可</td>
</tr>
<tr>
<td>?string</td>
<td style="text-align:center">查找文本中光标位置上方的string字符串，如要查找kabc则直接输入?kabc即可</td>
</tr>
<tr>
<td>yy</td>
<td style="text-align:center">复制光标所在的段落</td>
</tr>
<tr>
<td>y0</td>
<td style="text-align:center">复制光标位置到段首的所有字符</td>
</tr>
<tr>
<td>y$</td>
<td style="text-align:center">复制光标位置到段尾的所有字符</td>
</tr>
<tr>
<td>nyy</td>
<td style="text-align:center">从光标位置向下复制n段，包含光标所在的段落</td>
</tr>
<tr>
<td>ygg</td>
<td style="text-align:center">复制光标位置所在段落到文本开头的所有内容</td>
</tr>
<tr>
<td>yG</td>
<td style="text-align:center">复制光标位置所在段落到文本结尾的所有内容</td>
</tr>
<tr>
<td>p</td>
<td style="text-align:center">将复制的内容粘贴为光标所在段落的下一段</td>
</tr>
<tr>
<td>P</td>
<td style="text-align:center">将复制的内容粘贴为光标所在段落的上一段</td>
</tr>
<tr>
<td>dd</td>
<td style="text-align:center">删除光标所在的段落</td>
</tr>
<tr>
<td>d0</td>
<td style="text-align:center">删除光标位置到段首的所有字符</td>
</tr>
<tr>
<td>d$</td>
<td style="text-align:center">删除光标位置到段尾的所有字符</td>
</tr>
<tr>
<td>dgg</td>
<td style="text-align:center">删除光标位置所在段落到文本开头的所有内容</td>
</tr>
<tr>
<td>dG</td>
<td style="text-align:center">删除光标位置所在段落到文本结尾的所有内容</td>
</tr>
<tr>
<td>ndd</td>
<td style="text-align:center">从光标位置向下删除n段，包含光标所在的段落</td>
</tr>
<tr>
<td>u</td>
<td style="text-align:center">撤销上一个操作</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td style="text-align:center">重复上一个操作</td>
</tr>
<tr>
<td>:w</td>
<td style="text-align:center">保存数据</td>
</tr>
<tr>
<td>:w!</td>
<td style="text-align:center">保存时强制写入数据，不管文件是否为只读文件</td>
</tr>
<tr>
<td>:q</td>
<td style="text-align:center">关闭Vim</td>
</tr>
<tr>
<td>:q!</td>
<td style="text-align:center">关闭Vim，对所做的修改不做保存</td>
</tr>
<tr>
<td>:wq</td>
<td style="text-align:center">保存数据后关闭Vim</td>
</tr>
<tr>
<td>:wq!</td>
<td style="text-align:center">强制保存数据并关闭Vim</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vim入坑指南&quot;&gt;&lt;a href=&quot;#vim入坑指南&quot; class=&quot;headerlink&quot; title=&quot;vim入坑指南&quot;&gt;&lt;/a&gt;vim入坑指南&lt;/h1&gt;&lt;h2 id=&quot;什么是VIM&quot;&gt;&lt;a href=&quot;#什么是VIM&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>git操作详解</title>
    <link href="http://yoursite.com/2016/12/10/git%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/12/10/git操作详解/</id>
    <published>2016-12-10T11:42:31.000Z</published>
    <updated>2017-08-21T09:31:50.031Z</updated>
    
    <content type="html"><![CDATA[<p>Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。<br>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。<br>git clone、git remote、git fetch、git pull、git push</p>
<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p>
<h1 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h1><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>
<p>$ git clone &lt;版本库的网址&gt;</p>
<p>比如，克隆jQuery的版本库。</p>
<p>$ git clone <a href="https://github.com/jquery/jquery.git" target="_blank" rel="external">https://github.com/jquery/jquery.git</a></p>
<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>
<p>$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;<br>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>
<p>$ git clone http[s]://example.com/path/to/repo.git/<br>$ git clone ssh://example.com/path/to/repo.git/<br>$ git clone git://example.com/path/to/repo.git/<br>$ git clone /opt/git/project.git<br>$ git clone file:///opt/git/project.git<br>$ git clone ftp[s]://example.com/path/to/repo.git/<br>$ git clone rsync://example.com/path/to/repo.git/<br>SSH协议还有另一种写法。</p>
<p>$ git clone [user@]example.com:path/to/repo.git/<br>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。</p>
<h1 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h1><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。<br>不带选项的时候，git remote命令列出所有远程主机。</p>
<p>$ git remote<br>origin<br>使用-v选项，可以参看远程主机的网址。</p>
<p>$ git remote -v<br>origin  git@github.com:jquery/jquery.git (fetch)<br>origin  git@github.com:jquery/jquery.git (push)<br>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。<br>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>
<p>$ git clone -o jQuery <a href="https://github.com/jquery/jquery.git" target="_blank" rel="external">https://github.com/jquery/jquery.git</a><br>$ git remote<br>jQuery<br>上面命令表示，克隆的时候，指定远程主机叫做jQuery。<br>git remote show命令加上主机名，可以查看该主机的详细信息。</p>
<p>$ git remote show &lt;主机名&gt;<br>git remote add命令用于添加远程主机。</p>
<p>$ git remote add &lt;主机名&gt; &lt;网址&gt;<br>git remote rm命令用于删除远程主机。</p>
<p>$ git remote rm &lt;主机名&gt;<br>git remote rename命令用于远程主机的改名。</p>
<p>$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</p>
<h1 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h1><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。</p>
<p>$ git fetch &lt;远程主机名&gt;<br>上面命令将某个远程主机的更新，全部取回本地。<br>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。<br>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<p>$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;<br>比如，取回origin主机的master分支。</p>
<p>$ git fetch origin master<br>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。<br>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>
<p>$ git branch -r<br>origin/master</p>
<p>$ git branch -a</p>
<ul>
<li>master<br>remotes/origin/master<br>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。<br>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</li>
</ul>
<p>$ git checkout -b newBrach origin/master<br>上面命令表示，在origin/master的基础上，创建一个新分支。<br>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>
<p>$ git merge origin/master<br>或者<br>$ git rebase origin/master<br>上面命令表示在当前分支上，合并origin/master。</p>
<h1 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h1><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
<p>$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<br>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。</p>
<p>$ git pull origin next:master<br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>
<p>$ git pull origin next<br>上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</p>
<p>$ git fetch origin<br>$ git merge origin/next</p>
<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。<br>Git也允许手动建立追踪关系。</p>
<p>git branch –set-upstream master origin/next<br>上面命令指定master分支追踪origin/next分支。<br>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>
<p>$ git pull origin<br>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>
<p>$ git pull<br>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。<br>如果合并需要采用rebase模式，可以使用–rebase选项。</p>
<p>$ git pull –rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。<br>但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。</p>
<p>$ git pull -p<br>等同于下面的命令<br>$ git fetch –prune origin<br>$ git fetch -p</p>
<h1 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h1><p>git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。</p>
<p>$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。<br>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>
<p>$ git push origin master<br>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。<br>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>
<p>$ git push origin :master<br>等同于<br>$ git push origin –delete master<br>上面命令表示删除origin主机的master分支。<br>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<p>$ git push origin<br>上面命令表示，将当前分支推送到origin主机的对应分支。<br>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<p>$ git push<br>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</p>
<p>$ git push -u origin master<br>上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。<br>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>
<p>$ git config –global push.default matching<br>或者<br>$ git config –global push.default simple<br>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。</p>
<p>$ git push –all origin<br>上面命令表示，将所有本地分支都推送到origin主机。<br>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项。</p>
<p>$ git push –force origin<br>上面命令使用–force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用–force选项。<br>最后，git push不会推送标签（tag），除非使用–tags选项。<br>$ git push origin –tags</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。&lt;br&gt;Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。&lt;br&gt;git clone、git remote、git
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>markdown学习笔记</title>
    <link href="http://yoursite.com/2016/10/22/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/10/22/markdown学习笔记/</id>
    <published>2016-10-22T06:56:10.000Z</published>
    <updated>2017-08-16T05:39:37.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。</p>
<h1 id="Markdown-官方文档"><a href="#Markdown-官方文档" class="headerlink" title="Markdown 官方文档"></a>Markdown 官方文档</h1><ul>
<li><a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">创始人 John Gruber 的 Markdown 语法说明</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 中文版语法说明</a></li>
</ul>
<h1 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</p>
<p>#一级标题</p>
<p>##二级标题</p>
<p>###三级标题</p>
<ul>
<li><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></li>
<li><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></li>
<li><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></li>
</ul>
<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入 &gt; 这种尖括号（大于号）即可</p>
<blockquote>
<p>例如这样</p>
<p>例如这样</p>
</blockquote>
<h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>插入链接与插入图片的语法很像，区别在一个 !号</p>
<ul>
<li><p>图片为：<img src="" alt="">{ImgCap}{/ImgCap}</p>
</li>
<li><p>链接为：<a href=""></a></p>
</li>
</ul>
<h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p>
<p>例如：<strong> 这里是粗体 </strong>  <em>这里是斜体</em></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>效果</th>
<th style="text-align:center">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td>Blod</td>
<td style="text-align:center"><strong>text</strong></td>
</tr>
<tr>
<td>Emphasize</td>
<td style="text-align:center"><em>text</em></td>
</tr>
<tr>
<td>Strike-through</td>
<td style="text-align:center"><del>text</del></td>
</tr>
<tr>
<td>Link</td>
<td style="text-align:center"><a href="http://" target="_blank" rel="external">title</a></td>
</tr>
<tr>
<td>Inline Code</td>
<td style="text-align:center"><code>code</code></td>
</tr>
<tr>
<td>Image</td>
<td style="text-align:center"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://" alt="alt" title="">
                </div>
                <div class="image-caption">alt</div>
            </figure></td>
</tr>
<tr>
<td>List</td>
<td style="text-align:center">* item</td>
</tr>
<tr>
<td>Blockquote</td>
<td style="text-align:center">&gt; quote</td>
</tr>
</tbody>
</table>
<h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><p>如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。</p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>分割线的语法只需要三个 * 号。</p>
<h1 id="markdown-api"><a href="#markdown-api" class="headerlink" title="markdown api"></a>markdown api</h1><p><a href="http://api.jirengu.com/#markdown" target="_blank" rel="external">饥人谷markdwon api:http://api.jirengu.com/#markdown</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
&lt;h1 id=
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="指南" scheme="http://yoursite.com/tags/%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>HTML5音频可视化</title>
    <link href="http://yoursite.com/2015/12/19/HTML5%E9%9F%B3%E9%A2%91%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2015/12/19/HTML5音频可视化/</id>
    <published>2015-12-19T13:12:55.000Z</published>
    <updated>2017-08-16T07:47:22.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5音频可视化"><a href="#HTML5音频可视化" class="headerlink" title="HTML5音频可视化"></a>HTML5音频可视化</h1><p>2015年过的可是真快，眼睛一闭一睁，一睁一闭……</p>
<p>突然发现这一年自己完成了从一个（只会写写黑窗口程序，刷刷acm题目）的菜鸟级程序猿到前端初级攻城狮的升级。就像是经过了累年的蹲马步，站木桩式的修行，终于突破了基本功修炼瓶颈，进入到了一个新的武学世界。开始可以玩玩更加酷炫的东西了……</p>
<p>话说回来，想当初在读高中的时候，看到天天动听，realplayer做出来的音频可视化效果非常的酷炫，也很想知道这种效果怎么做出来的。而正好，这学期的计算机图形学课程设计里正好有这个选题的研究，于是我果断的跳进了这个坑。</p>
<p>话不多说，先上预览地址效果图：<a href="https://code.w3ctech.com/detail/3443" target="_blank" rel="external">HTML5 web audio</a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://images.cnblogs.com/cnblogs_com/younth/1059645/o_webaudio.jpg" alt="选择本地音乐文件" title="">
                </div>
                <div class="image-caption">选择本地音乐文件</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://images.cnblogs.com/cnblogs_com/younth/1059658/o_playing.jpg" alt="播放效果" title="">
                </div>
                <div class="image-caption">播放效果</div>
            </figure>
<h1 id="实现思路与程序运行流程"><a href="#实现思路与程序运行流程" class="headerlink" title="实现思路与程序运行流程"></a>实现思路与程序运行流程</h1><h2 id="1-初始化canvas"><a href="#1-初始化canvas" class="headerlink" title="1.初始化canvas"></a>1.初始化canvas</h2><h2 id="2-显示音频文件选取对话框"><a href="#2-显示音频文件选取对话框" class="headerlink" title="2.显示音频文件选取对话框"></a>2.显示音频文件选取对话框</h2><h2 id="3-选择要播放的音乐文件，解码音乐文件，"><a href="#3-选择要播放的音乐文件，解码音乐文件，" class="headerlink" title="3.选择要播放的音乐文件，解码音乐文件，"></a>3.选择要播放的音乐文件，解码音乐文件，</h2><h2 id="4-将解码后的数据通过audioContext对象进行处理得到analyser"><a href="#4-将解码后的数据通过audioContext对象进行处理得到analyser" class="headerlink" title="4.将解码后的数据通过audioContext对象进行处理得到analyser"></a>4.将解码后的数据通过audioContext对象进行处理得到analyser</h2><h2 id="5-将解析后的analyser数据逐帧显示在canvas画布上，从而获得音乐的逐帧动画。"><a href="#5-将解析后的analyser数据逐帧显示在canvas画布上，从而获得音乐的逐帧动画。" class="headerlink" title="5.将解析后的analyser数据逐帧显示在canvas画布上，从而获得音乐的逐帧动画。"></a>5.将解析后的analyser数据逐帧显示在canvas画布上，从而获得音乐的逐帧动画。</h2><h1 id="选题所用到的知识点"><a href="#选题所用到的知识点" class="headerlink" title="选题所用到的知识点"></a>选题所用到的知识点</h1><ul>
<li>HTML5 CANVAS绘图操作</li>
<li>HTML5 AUDIO API</li>
<li>文件读取及浏览器同源策略与FileReader</li>
<li>逐帧动画原理requestAnimationFrame</li>
<li>浏览器事件响应</li>
</ul>
<h1 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h1><p>‘’’javascript </p>
<p>window.onload = function () {<br>    var HEIGHT = window.innerHeight, WIDTH = window.innerWidth;<br>    var canvas = document.getElementById(“canvas”), audioInput = document.getElementById(‘uploadedFile’);<br>    var ctx = canvas.getContext(“2d”);<br>    var mfile, mfileName;<br>    var audioContext = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();<br>    window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;</p>
<pre><code>function initCanvas() {
    canvas.height = HEIGHT;
    canvas.width = WIDTH;
    canvas.style.backgroundColor = &quot;#fff&quot;;
}
function loadPanel() {
    document.getElementById(&quot;panel&quot;).style.top = &quot;150px&quot;;
}
function outPanel() {
    document.getElementById(&quot;panel&quot;).style.top = &quot;-150px&quot;;
}
audioInput.onchange = function () {
    //这里判断一下文件长度可以确定用户是否真的选择了文件，如果点了取消则文件长度为0
    if (audioInput.files.length !== 0) {
        mfile = audioInput.files[0]; //将文件赋值到Visualizer对象的属性上
        mfileName = mfile.name;
        document.getElementById(&quot;title&quot;).innerHTML = &quot;解码中……*_*&quot;;
        start(); //获取到文件后，开始程序，这个方法会在后面定义并实现
    };
}
function start() {
    var fr = new FileReader();
    fr.onload = function (e) { //文件读取完后调用此函数
        var fileResult = e.target.result; //这是读取成功得到的结果ArrayBuffer数据
        audioContext.decodeAudioData(fileResult, function (buffer) { //解码成功则调用此函数，参数buffer为解码后得到的结果
            var audioBufferSouceNode = audioContext.createBufferSource();
            var analyser = audioContext.createAnalyser();
            audioBufferSouceNode.connect(analyser);
            analyser.connect(audioContext.destination);
            audioBufferSouceNode.buffer = buffer;
            audioBufferSouceNode.start(0);
            draw(analyser);
            outPanel();
        }, function (e) {
            document.getElementById(&quot;title&quot;).innerHTML = &quot;文件解码失败:(&quot;;
        });
    };
    //将上一步获取的文件传递给FileReader从而将其读取为ArrayBuffer格式
    fr.readAsArrayBuffer(mfile);
}
function draw(analyser) {
    var cNum = 128;
    analyser.fftSize = cNum * 2;
    var Dots = [];
    function random(m, n) {
        return Math.round(Math.random() * (n - m) + m);
    }
    function getDots() {
        Dots = [];
        for (var i = 0; i &lt; cNum; i++) {
            var x = random(0, canvas.width);
            var y = random(0, canvas.height);
            var color = &quot;rgba(&quot; + random(0, 255) + &quot;,&quot; + random(0, 255) + &quot;,&quot; + random(0, 255) + &quot;,&quot; + random(0,10)/10 + &quot;)&quot;;
            Dots.push({
                x: x,
                y: y,
                dy: random(0, 2),
                color: color
            });
        }
    }
    getDots();
    var drawCircle = function () {
        var array = new Uint8Array(analyser.frequencyBinCount);
        analyser.getByteFrequencyData(array);
        ctx.clearRect(0, 0, WIDTH, HEIGHT);
        for (var i = 0; i &lt; cNum; i++) {
            ctx.beginPath();

            var o = Dots[i];
            var r = array[i] / 256 * 30;                       
            if (o.x &gt; canvas.width||o.y&gt;canvas.height) {
                o.y = 0;                            
            }
            else {                            
                o.y = o.y;
            }

            ctx.arc(o.x, o.y, r, 0, Math.PI * 2, true);
            var g = ctx.createRadialGradient(o.x, o.y, 0, o.x, o.y, r);
            g.addColorStop(0, &quot;#fff&quot;);
            g.addColorStop(0.9, &quot;#fff&quot;);
            g.addColorStop(1, o.color);
            //g.addColorStop(1, &quot;rgb(114,208,156)&quot;);
            ctx.fillStyle = g;
            ctx.fill();
            ctx.closePath();
        }
        requestAnimationFrame(drawCircle);                    
    }
    requestAnimationFrame(drawCircle);                
}
initCanvas();
loadPanel();
</code></pre><p>}<br>‘’’</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://developer.mozilla.org/en-US/docs/Web/API/FileReader" target="_blank" rel="external">File reader in JavaScript</a><br>2.<a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioContext" target="_blank" rel="external">Audio context from MDN</a><br>3.<a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" target="_blank" rel="external">Window.requestAnimationFrame</a><br>4.<a href="http://www.cnblogs.com/Wayou/p/3543577.html#home" target="_blank" rel="external">开大你的音响，感受HTML5 Audio API带来的视听盛宴</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML5音频可视化&quot;&gt;&lt;a href=&quot;#HTML5音频可视化&quot; class=&quot;headerlink&quot; title=&quot;HTML5音频可视化&quot;&gt;&lt;/a&gt;HTML5音频可视化&lt;/h1&gt;&lt;p&gt;2015年过的可是真快，眼睛一闭一睁，一睁一闭……&lt;/p&gt;
&lt;p&gt;突然发现这
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="web audio" scheme="http://yoursite.com/tags/web-audio/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>纯css实现扁平化360卫士logo</title>
    <link href="http://yoursite.com/2015/12/10/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E6%89%81%E5%B9%B3%E5%8C%96360%E5%8D%AB%E5%A3%ABlogo/"/>
    <id>http://yoursite.com/2015/12/10/纯css实现扁平化360卫士logo/</id>
    <published>2015-12-10T08:42:51.000Z</published>
    <updated>2017-08-16T05:50:51.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纯css实现扁平化360卫士logo"><a href="#纯css实现扁平化360卫士logo" class="headerlink" title="纯css实现扁平化360卫士logo"></a>纯css实现扁平化360卫士logo</h1><p>前几天在w3ctech上看到有人用纯css写出了360卫士的logo，感觉蛮好玩的。</p>
<p>因为自己用css以来，还没有写过这种玩意，出于娱乐，我也来试着尝试一下。</p>
<p>开始也不知到怎么下手，最棘手的是那两个像太极的东东不好弄。不过，好在以前用过photoshop绘制过一些简单的icon。所以，经过我仔细</p>
<p>的分析。大概有了思路，这两个东东是可以利用box-shadow这个属性来实现。虽然跟photoshop绘制有点不同，但是大致还是差不多的。</p>
<p><a href="http://code.w3ctech.com/detail/2501" target="_blank" rel="external">代码效果预览地址：http://code.w3ctech.com/detail/2501</a></p>
<p>对于刚在学习css的同学是个不错的小案例，分享给你们，有兴趣的可以试试。当然，如果有更好的思路的，可以在下面留言，相互探讨，一起进步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;纯css实现扁平化360卫士logo&quot;&gt;&lt;a href=&quot;#纯css实现扁平化360卫士logo&quot; class=&quot;headerlink&quot; title=&quot;纯css实现扁平化360卫士logo&quot;&gt;&lt;/a&gt;纯css实现扁平化360卫士logo&lt;/h1&gt;&lt;p&gt;前几天在w3
    
    </summary>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>我喜欢出发</title>
    <link href="http://yoursite.com/2014/08/17/%E6%88%91%E5%96%9C%E6%AC%A2%E5%87%BA%E5%8F%91/"/>
    <id>http://yoursite.com/2014/08/17/我喜欢出发/</id>
    <published>2014-08-17T11:54:13.000Z</published>
    <updated>2017-08-16T03:58:13.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我喜欢出发"><a href="#我喜欢出发" class="headerlink" title="我喜欢出发"></a>我喜欢出发</h1><h3 id="——汪国真"><a href="#——汪国真" class="headerlink" title="——汪国真"></a>——汪国真</h3><p>我喜欢出发。</p>
<p>　　凡是到达了的地方，都属于昨天。哪怕那山再青，那水再秀，那风再温柔。太深的流连便成了一种羁绊，绊住的不仅有双脚，还有未来。</p>
<p>　　怎么能不喜欢出发呢?没见过大山的巍峨，真是遗憾；见了大山的巍峨没见过大海的浩瀚仍然遗憾；见了大海的浩瀚没见过大漠的广袤，依旧遗憾；见了大漠的广袤没见过森林的神秘，还是遗憾。世界上有不绝的风景，我有不老的心情。</p>
<p>　　我自然知道，大山有坎坷，大海有浪涛，大漠有风沙，森林有猛兽。即便这样，我依然喜欢。</p>
<p>　　打破生活的平静便是另一番景致，一种属于年轻的景致。真庆幸，我还没有老。即便真老了又怎么样，不是有句话叫老当益壮吗?</p>
<p>　　于是，我还想从大山那里学习深刻，我还想从大海那里学习勇敢，我还想从大漠那里学习沉着，我还想从森林那里学习机敏。我想学着品味一种缤纷的人生。</p>
<p>　　人能走多远?这话不是要问两脚而是要问志向；人能攀多高?这事不是要问双手而是要问意志。于是，我想用青春的热血给自己树起一个高远的目标。不仅是为了争取一种光荣，更是为了追求一种境界。目标实现了，便是光荣；目标实现不了，人生也会因这一路风雨跋涉变得丰富而充实；在我看来，这就是不虚此生。</p>
<p>　　是的，我喜欢出发，愿你也喜欢。</p>
<p>每次看完这篇文章，心情都会舒畅很多，很多的不快和忧愁便会如烟散去。</p>
<p>想到自己还有那么多的事情没有去做，没有去尝试，就觉得自己应该坚强起来，坚持，勇敢的去一步一步的朝目标前进。虽然不知道前方等待我的是什么，但正如作者所说:”只要热爱生命，一切都在意料之中“。</p>
<p>是的，我也喜欢出发，喜欢去探索新的生活。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我喜欢出发&quot;&gt;&lt;a href=&quot;#我喜欢出发&quot; class=&quot;headerlink&quot; title=&quot;我喜欢出发&quot;&gt;&lt;/a&gt;我喜欢出发&lt;/h1&gt;&lt;h3 id=&quot;——汪国真&quot;&gt;&lt;a href=&quot;#——汪国真&quot; class=&quot;headerlink&quot; title=&quot;——汪
    
    </summary>
    
    
      <category term="心情" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
