{"meta":{"title":"我一路向北","subtitle":null,"description":null,"author":"我一路向北","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-08-16T01:47:07.000Z","updated":"2017-08-16T01:47:46.547Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-08-16T01:48:13.000Z","updated":"2017-08-16T01:48:28.924Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"vim入坑指南","slug":"vim入坑指南","date":"2016-12-14T02:04:38.000Z","updated":"2017-08-16T05:03:38.027Z","comments":true,"path":"2016/12/14/vim入坑指南/","link":"","permalink":"http://yoursite.com/2016/12/14/vim入坑指南/","excerpt":"","text":"vim入坑指南什么是VIMVim是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用，和Emacs并列成为类Unix系统用户最喜欢的文本编辑器。 vim的设计理念命令组合:Vim强大的编辑能力中很大部分是来自于其普通模式命令。vim的设计理念是命令的组合。例如普通模式命令”dd”删除当前行，”dj”代表删除到下一行,原理是第一个”d”含义是删除,”j”键代表移动到下一行,组合后”dj”删除当前行和下一行。另外还可以指定命令重复次数，”2dd”（重复”dd”两次），和”dj”的效果是一样的。”d^”,”^”代表行首,故组合后含义是删除到光标开始到行首间的内容(不包含光标);”d$” $”代表行尾,删除到行尾的内容(包含光标);用户学习了各种各样的文本间移动/跳转的命令和其他的普通模式的编辑命令，并且能够灵活组合使用的话，能够比那些没有模式的编辑器更加高效的进行文本编辑。 模式间的组合:在普通模式中，有很多方法可以进入插入模式。比较普通的方式是按”a”（append/追加）键或者”i”（insert/插入）键。 Vim三种模式插入模式：即 insert 模式，用来输入文本；编辑模式：用以执行命令，也称为正常模式，也是进入Vim的缺省模式；命令模式：用来执行冒号命令。进入Vim后会直接进入编辑模式，接下来按下i进入插入模式，可以输入字符，按下键将从插入模式转换到编辑模式，该模式用于移动和操纵文本。在编辑模式下输入:即可进入命令模式，可以进行保存、查找、替换、配置Vim操作等。 按键功能在Vim的编辑模式下，一些常用的按键都变成了功能键，并且与大家在Windows下常用的快捷键完全不同，在这里，总结一些初学Vim所用的按键功能： 按键 功能 h或← 光标左移 l或→ 光标右移 k或↑ 光标上移 j或↓ 光标下移 gg 快速定位到文本开头 G（shift+g） 快速定位到文本最后一段 0或home 快速定位到当前段首 $或end 快速定位到当前段首 Ctrl+f 向下翻一页 Ctrl+b 向上翻一页 Ctrl+d 向下翻半页 Ctrl+u 向上翻一页 /string 查找文本中光标位置下方的string字符串，如要查找kabc则直接输入/kabc即可 ?string 查找文本中光标位置上方的string字符串，如要查找kabc则直接输入?kabc即可 yy 复制光标所在的段落 y0 复制光标位置到段首的所有字符 y$ 复制光标位置到段尾的所有字符 nyy 从光标位置向下复制n段，包含光标所在的段落 ygg 复制光标位置所在段落到文本开头的所有内容 yG 复制光标位置所在段落到文本结尾的所有内容 p 将复制的内容粘贴为光标所在段落的下一段 P 将复制的内容粘贴为光标所在段落的上一段 dd 删除光标所在的段落 d0 删除光标位置到段首的所有字符 d$ 删除光标位置到段尾的所有字符 dgg 删除光标位置所在段落到文本开头的所有内容 dG 删除光标位置所在段落到文本结尾的所有内容 ndd 从光标位置向下删除n段，包含光标所在的段落 u 撤销上一个操作 Ctrl+r 重复上一个操作 :w 保存数据 :w! 保存时强制写入数据，不管文件是否为只读文件 :q 关闭Vim :q! 关闭Vim，对所做的修改不做保存 :wq 保存数据后关闭Vim :wq! 强制保存数据并关闭Vim","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"编程","slug":"编程","permalink":"http://yoursite.com/tags/编程/"}]},{"title":"markdown学习笔记","slug":"markdown学习笔记","date":"2016-10-22T06:56:10.000Z","updated":"2017-08-16T05:39:37.523Z","comments":true,"path":"2016/10/22/markdown学习笔记/","link":"","permalink":"http://yoursite.com/2016/10/22/markdown学习笔记/","excerpt":"","text":"简介Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 用途Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。 Markdown 官方文档 创始人 John Gruber 的 Markdown 语法说明 Markdown 中文版语法说明 Markdown 语法标题标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。 #一级标题 ##二级标题 ###三级标题 一级标题 二级标题 三级标题 以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。 列表熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。 引用如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入 &gt; 这种尖括号（大于号）即可 例如这样 例如这样 图片与链接插入链接与插入图片的语法很像，区别在一个 !号 图片为：{ImgCap}{/ImgCap} 链接为： 粗体与斜体Markdown 的粗体和斜体也非常简单，用两个 包含一段文本就是粗体的语法，用一个 包含一段文本就是斜体的语法。 例如： 这里是粗体 这里是斜体 表格 效果 语法 Blod text Emphasize text Strike-through text Link title Inline Code code Image alt List * item Blockquote &gt; quote 代码框如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。 分割线分割线的语法只需要三个 * 号。 markdown api饥人谷markdwon api:http://api.jirengu.com/#markdown","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"},{"name":"指南","slug":"指南","permalink":"http://yoursite.com/tags/指南/"}]},{"title":"HTML5音频可视化","slug":"HTML5音频可视化","date":"2015-12-19T13:12:55.000Z","updated":"2017-08-16T07:47:22.370Z","comments":true,"path":"2015/12/19/HTML5音频可视化/","link":"","permalink":"http://yoursite.com/2015/12/19/HTML5音频可视化/","excerpt":"","text":"HTML5音频可视化2015年过的可是真快，眼睛一闭一睁，一睁一闭…… 突然发现这一年自己完成了从一个（只会写写黑窗口程序，刷刷acm题目）的菜鸟级程序猿到前端初级攻城狮的升级。就像是经过了累年的蹲马步，站木桩式的修行，终于突破了基本功修炼瓶颈，进入到了一个新的武学世界。开始可以玩玩更加酷炫的东西了…… 话说回来，想当初在读高中的时候，看到天天动听，realplayer做出来的音频可视化效果非常的酷炫，也很想知道这种效果怎么做出来的。而正好，这学期的计算机图形学课程设计里正好有这个选题的研究，于是我果断的跳进了这个坑。 话不多说，先上预览地址效果图：HTML5 web audio 选择本地音乐文件 播放效果 实现思路与程序运行流程1.初始化canvas2.显示音频文件选取对话框3.选择要播放的音乐文件，解码音乐文件，4.将解码后的数据通过audioContext对象进行处理得到analyser5.将解析后的analyser数据逐帧显示在canvas画布上，从而获得音乐的逐帧动画。选题所用到的知识点 HTML5 CANVAS绘图操作 HTML5 AUDIO API 文件读取及浏览器同源策略与FileReader 逐帧动画原理requestAnimationFrame 浏览器事件响应 主要代码‘’’javascript window.onload = function () { var HEIGHT = window.innerHeight, WIDTH = window.innerWidth; var canvas = document.getElementById(“canvas”), audioInput = document.getElementById(‘uploadedFile’); var ctx = canvas.getContext(“2d”); var mfile, mfileName; var audioContext = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)(); window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame; function initCanvas() { canvas.height = HEIGHT; canvas.width = WIDTH; canvas.style.backgroundColor = &quot;#fff&quot;; } function loadPanel() { document.getElementById(&quot;panel&quot;).style.top = &quot;150px&quot;; } function outPanel() { document.getElementById(&quot;panel&quot;).style.top = &quot;-150px&quot;; } audioInput.onchange = function () { //这里判断一下文件长度可以确定用户是否真的选择了文件，如果点了取消则文件长度为0 if (audioInput.files.length !== 0) { mfile = audioInput.files[0]; //将文件赋值到Visualizer对象的属性上 mfileName = mfile.name; document.getElementById(&quot;title&quot;).innerHTML = &quot;解码中……*_*&quot;; start(); //获取到文件后，开始程序，这个方法会在后面定义并实现 }; } function start() { var fr = new FileReader(); fr.onload = function (e) { //文件读取完后调用此函数 var fileResult = e.target.result; //这是读取成功得到的结果ArrayBuffer数据 audioContext.decodeAudioData(fileResult, function (buffer) { //解码成功则调用此函数，参数buffer为解码后得到的结果 var audioBufferSouceNode = audioContext.createBufferSource(); var analyser = audioContext.createAnalyser(); audioBufferSouceNode.connect(analyser); analyser.connect(audioContext.destination); audioBufferSouceNode.buffer = buffer; audioBufferSouceNode.start(0); draw(analyser); outPanel(); }, function (e) { document.getElementById(&quot;title&quot;).innerHTML = &quot;文件解码失败:(&quot;; }); }; //将上一步获取的文件传递给FileReader从而将其读取为ArrayBuffer格式 fr.readAsArrayBuffer(mfile); } function draw(analyser) { var cNum = 128; analyser.fftSize = cNum * 2; var Dots = []; function random(m, n) { return Math.round(Math.random() * (n - m) + m); } function getDots() { Dots = []; for (var i = 0; i &lt; cNum; i++) { var x = random(0, canvas.width); var y = random(0, canvas.height); var color = &quot;rgba(&quot; + random(0, 255) + &quot;,&quot; + random(0, 255) + &quot;,&quot; + random(0, 255) + &quot;,&quot; + random(0,10)/10 + &quot;)&quot;; Dots.push({ x: x, y: y, dy: random(0, 2), color: color }); } } getDots(); var drawCircle = function () { var array = new Uint8Array(analyser.frequencyBinCount); analyser.getByteFrequencyData(array); ctx.clearRect(0, 0, WIDTH, HEIGHT); for (var i = 0; i &lt; cNum; i++) { ctx.beginPath(); var o = Dots[i]; var r = array[i] / 256 * 30; if (o.x &gt; canvas.width||o.y&gt;canvas.height) { o.y = 0; } else { o.y = o.y; } ctx.arc(o.x, o.y, r, 0, Math.PI * 2, true); var g = ctx.createRadialGradient(o.x, o.y, 0, o.x, o.y, r); g.addColorStop(0, &quot;#fff&quot;); g.addColorStop(0.9, &quot;#fff&quot;); g.addColorStop(1, o.color); //g.addColorStop(1, &quot;rgb(114,208,156)&quot;); ctx.fillStyle = g; ctx.fill(); ctx.closePath(); } requestAnimationFrame(drawCircle); } requestAnimationFrame(drawCircle); } initCanvas(); loadPanel(); }‘’’ 参考资料1.File reader in JavaScript2.Audio context from MDN3.Window.requestAnimationFrame4.开大你的音响，感受HTML5 Audio API带来的视听盛宴","categories":[],"tags":[{"name":"html5","slug":"html5","permalink":"http://yoursite.com/tags/html5/"},{"name":"web audio","slug":"web-audio","permalink":"http://yoursite.com/tags/web-audio/"},{"name":"canvas","slug":"canvas","permalink":"http://yoursite.com/tags/canvas/"}]},{"title":"纯css实现扁平化360卫士logo","slug":"纯css实现扁平化360卫士logo","date":"2015-12-10T08:42:51.000Z","updated":"2017-08-16T05:50:51.831Z","comments":true,"path":"2015/12/10/纯css实现扁平化360卫士logo/","link":"","permalink":"http://yoursite.com/2015/12/10/纯css实现扁平化360卫士logo/","excerpt":"","text":"纯css实现扁平化360卫士logo前几天在w3ctech上看到有人用纯css写出了360卫士的logo，感觉蛮好玩的。 因为自己用css以来，还没有写过这种玩意，出于娱乐，我也来试着尝试一下。 开始也不知到怎么下手，最棘手的是那两个像太极的东东不好弄。不过，好在以前用过photoshop绘制过一些简单的icon。所以，经过我仔细 的分析。大概有了思路，这两个东东是可以利用box-shadow这个属性来实现。虽然跟photoshop绘制有点不同，但是大致还是差不多的。 代码效果预览地址：http://code.w3ctech.com/detail/2501 对于刚在学习css的同学是个不错的小案例，分享给你们，有兴趣的可以试试。当然，如果有更好的思路的，可以在下面留言，相互探讨，一起进步。","categories":[],"tags":[{"name":"css3","slug":"css3","permalink":"http://yoursite.com/tags/css3/"}]},{"title":"我喜欢出发","slug":"我喜欢出发","date":"2014-08-17T11:54:13.000Z","updated":"2017-08-16T03:58:13.791Z","comments":true,"path":"2014/08/17/我喜欢出发/","link":"","permalink":"http://yoursite.com/2014/08/17/我喜欢出发/","excerpt":"","text":"我喜欢出发——汪国真我喜欢出发。 凡是到达了的地方，都属于昨天。哪怕那山再青，那水再秀，那风再温柔。太深的流连便成了一种羁绊，绊住的不仅有双脚，还有未来。 怎么能不喜欢出发呢?没见过大山的巍峨，真是遗憾；见了大山的巍峨没见过大海的浩瀚仍然遗憾；见了大海的浩瀚没见过大漠的广袤，依旧遗憾；见了大漠的广袤没见过森林的神秘，还是遗憾。世界上有不绝的风景，我有不老的心情。 我自然知道，大山有坎坷，大海有浪涛，大漠有风沙，森林有猛兽。即便这样，我依然喜欢。 打破生活的平静便是另一番景致，一种属于年轻的景致。真庆幸，我还没有老。即便真老了又怎么样，不是有句话叫老当益壮吗? 于是，我还想从大山那里学习深刻，我还想从大海那里学习勇敢，我还想从大漠那里学习沉着，我还想从森林那里学习机敏。我想学着品味一种缤纷的人生。 人能走多远?这话不是要问两脚而是要问志向；人能攀多高?这事不是要问双手而是要问意志。于是，我想用青春的热血给自己树起一个高远的目标。不仅是为了争取一种光荣，更是为了追求一种境界。目标实现了，便是光荣；目标实现不了，人生也会因这一路风雨跋涉变得丰富而充实；在我看来，这就是不虚此生。 是的，我喜欢出发，愿你也喜欢。 每次看完这篇文章，心情都会舒畅很多，很多的不快和忧愁便会如烟散去。 想到自己还有那么多的事情没有去做，没有去尝试，就觉得自己应该坚强起来，坚持，勇敢的去一步一步的朝目标前进。虽然不知道前方等待我的是什么，但正如作者所说:”只要热爱生命，一切都在意料之中“。 是的，我也喜欢出发，喜欢去探索新的生活。","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://yoursite.com/tags/心情/"}]},{"title":"Hello World","slug":"hello-world","date":"2014-07-11T08:24:56.000Z","updated":"2017-08-16T04:00:18.922Z","comments":true,"path":"2014/07/11/hello-world/","link":"","permalink":"http://yoursite.com/2014/07/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}